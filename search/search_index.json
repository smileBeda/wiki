{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Welcome to the t2linux wiki!</p> <p>This wiki contains knowledge about running Linux on Macs with the T2 chip. A list of those devices can be found on Apple's website.</p>"},{"location":"#getting-started","title":"Getting started","text":"<p>To get started with an installation, refer to the roadmap.</p>"},{"location":"#contact-us","title":"Contact us","text":"<p>You may contact us on the Linux on T2 Macs (2018+) Discord Server, where you can find most of the people involved.</p>"},{"location":"#contribute","title":"Contribute","text":"<p>Visit the Contribute page for more details.</p>"},{"location":"#notable-resources","title":"Notable Resources","text":""},{"location":"#distributions","title":"Distributions","text":"<p>Different distributions are maintained by different people in their own repositories. If the distribution you want to use has a guide here, it's recommended to follow it instead of the instructions given in one of the repositories or otherwise official documentation by distribution vendor, as it considers T2 support.</p> <ul> <li>Arch https://github.com/t2linux/archiso-t2</li> <li>EndeavourOS https://github.com/t2linux/EndeavourOS-ISO-t2</li> <li>Fedora https://github.com/mikeeq/mbp-fedora</li> <li>Fedora https://github.com/t2linux/fedora-iso</li> <li>Gentoo https://github.com/t2linux/T2-Gentoo-Kernel</li> <li>Manjaro https://github.com/NoaHimesaka1873/manjaroiso-t2</li> <li>Tails https://github.com/T2minator/mbp-tails</li> <li>Ubuntu &amp; Kubuntu https://github.com/t2linux/T2-Ubuntu</li> </ul>"},{"location":"#kernel-modules","title":"Kernel Modules","text":"<p>Support for hardware is cross distro besides patches to the distribution specific kernel. The following repos contain kernel modules for said support:</p> <ul> <li>MacBook Bridge / T2 Linux Driver https://github.com/t2linux/apple-bce-drv</li> <li>Touchbar and Ambient Light https://github.com/t2linux/apple-ib-drv</li> </ul>"},{"location":"#guides-and-similar","title":"Guides and similar","text":"<p>Note that, if you are using one of the distributions listed above, you should follow their install guides rather than the ones listed under this section. However, they might still be important to gain a better general picture or to help with specific issues.</p> <ul> <li>List of Mac Model Identifiers on everymac.com</li> <li>Using Luks with the integrated keyboard https://github.com/DimitriDokuchaev/GrubLuksUnlock</li> <li>Adding macOS-like screenshot shortcuts to KDE Plasma https://gist.github.com/networkException/5a68299accc1872749c86301c1449690</li> <li>Disable thermal throttling (better performance but higher temperatures) https://github.com/yyearth/turnoff-BD-PROCHOT</li> <li>Install a distribution in a virtual machine and copy it to bare metal afterwards https://gist.github.com/Redecorating/c876a4c3b24e47d79c1f921495f62213 (using Pop!_OS as an example)</li> <li>Get SMART information of your Apple Internal SSD using Linux https://gist.github.com/AdityaGarg8/b03e57826213019fbffa747e1c724cac</li> <li>Keyboard related issues https://wiki.archlinux.org/title/Apple_Keyboard</li> <li>Get silent boot experience similar to macOS and Windows on Ubuntu and Arch Linux.</li> </ul> <p>Outdated</p> <ul> <li>State of Linux on the MacBook Pro (technical documentation) https://github.com/Dunedan/mbp-2016-linux</li> <li>Arch on 2018 MacBook Pro https://gist.github.com/TRPB/437f663b545d23cc8a2073253c774be3</li> <li>Ubuntu on 16 inch, 2019 MacBook Pro https://gist.github.com/gbrow004/096f845c8fe8d03ef9009fbb87b781a4</li> </ul>"},{"location":"#notable-contributors","title":"Notable Contributors","text":"<p>Check out the list of all Notable Contributors here.</p>"},{"location":"contribute/","title":"Contribute","text":"<p>The T2 project itself currently does not accept financial donations. However, some of the contributors and maintainers of the project do accept donations on their own. You may refer to the Support our maintainers section of this page to get the links of the same.</p> <p>The best way of donation which we believe is in the form of skill. If you think you have the potential to help us in pushing the project further like fixing bugs, adding new features etc., you are free to do so. For this, you may contact our discord server, where other members of this organization are present.</p>"},{"location":"contribute/#support-our-maintainers","title":"Support our maintainers","text":"<p>Here is the list and links to donate some of our maintainers.</p> <ul> <li>MCMrARM - Author of the apple-bce driver. Donate via Paypal.</li> <li>JPyke3 - Played major role in getting Manjaro working on T2 Macs. Donate via Patreon or On Chain.</li> <li>marcosfad - Played major role in getting Ubuntu working on T2 Macs. Donate via Paypal or GitHub Sponsors.</li> <li>NoaHimesaka1873 - Currently maintains boot images for Arch, EndeavourOS, and Manjaro. Also maintains kernel for Manjaro too. Donate via GitHub Sponsors or Toss (South Korea residents only).</li> <li>Redecorating - Currently maintains Arch kernel package, has written T2 related kernel patches and worked on T2 related kernel regressions. Donate via Paypal.</li> <li>AdityaGarg8 - Current maintainer of Ubuntu. Has also helped in writing T2 kernel patches and upstreaming various patches. Donate via Amazon Gift Cards India (Link for Indians, Link for other countries), or GitHub sponsors (Link). The cards can be emailed to gargaditya08@live.com or via the discord.</li> <li>networkException - Wiki creator and maintainer. Donate via GitHub Sponsors.</li> </ul>"},{"location":"notable-contributors/","title":"All Notable Contributors","text":"<p>This page contains all Notable Contributors for the Linux on T2 project.</p> <p>If there is someone missing that you think should be on this list, send a PR on the wiki repository.</p> <ul> <li>aunali1 (Arch Linux and Kernel Module work) https://github.com/aunali1</li> <li>mikroskeem (NixOS and founder of t2linux discord community) https://github.com/mikroskeem</li> <li>JPyke3 (Manjaro) https://github.com/JPyke3</li> <li>marcosfad (Ubuntu) https://github.com/marcosfad</li> <li>MCMrARM (MacBook Bridge / T2 Linux Driver) https://github.com/MCMrARM</li> <li>mikeeq (Fedora) https://github.com/mikeeq</li> <li>networkException (Wiki maintenance and <code>mbpfan</code> fork for T2) https://github.com/networkException</li> <li>Redecorating (Arch Linux, Wiki maintenance, Apple GMUX for T2 Macs, Magic Backlight driver and improved the touchbar driver) https://github.com/Redecorating</li> <li>roadrunner2 (Touchbar and Ambient Light Driver) https://github.com/roadrunner2</li> <li>kekrby (Audio, NixOS, Apple GMUX for T2 Macs, Magic Backlight driver and improved the touchbar driver) https://github.com/kekrby</li> <li>AdityaGarg8 (Ubuntu and wiki maintenance) https://github.com/AdityaGarg8</li> <li>EmreTech (Gentoo) https://github.com/EmreTech</li> <li>T2minator (Tails) https://github.com/T2minator</li> <li>NoaHimesaka1873 (Arch, Manjaro and EndeavourOS) https://github.com/NoaHimesaka1873</li> <li>The Asahi Linux Contributors (Wi-Fi and Bluetooth) https://asahilinux.org/</li> <li>lemmyg (Fine audio tuning for MacBook Pro 16 inch 2019) https://github.com/lemmyg</li> </ul>"},{"location":"roadmap/","title":"Introduction","text":"<p>This article is meant to guide users through the wiki by giving an overview over the required steps to get to a working installation.</p>"},{"location":"roadmap/#deciding-on-the-installation","title":"Deciding on the Installation","text":"<p>Using Linux on a T2 Mac comes with compromises as well as advantages compared to macOS. You will need to decide for yourself if it its worth it.</p> <p>Your first consideration should be the risk you are taking. Don't worry, nobody has broken their machine so far by installing Linux and by following the guides closely you should be able to get everything working even without a lot of knowledge as well. Still in case something goes wrong we are not responsible for it, we will try our best to help out however.</p>"},{"location":"roadmap/#can-i-completely-remove-macos","title":"Can I completely remove macOS?","text":"<p>While it is technically possible to remove macOS entirely, it is strongly encouraged to dual boot it with Linux because:</p> <ol> <li>To set up Wi-Fi on Linux, you will need Wi-Fi firmware, which can be legally obtained only from macOS. It is illegal to host the firmware on any website as it is under a non redistributable license.</li> <li>It acts as a backup in case something goes wrong.</li> <li>macOS updates often bring along certain firmware updates, which tend to be useful for Linux as well.</li> </ol> <p>Still if you wish to remove macOS completely, it is recommended to create a bootable macOS installer so as to have an option of restoring macOS back.</p> <p>You can also use the Internet Recovery to reinstall macOS, but this has been quite unreliable and slow for a considerable amount of users, thus making the bootable installer method a better one.</p>"},{"location":"roadmap/#what-works-on-linux","title":"What works on Linux?","text":"<p>Take a look at the state article. It gives a list of roughly what works on Linux and what doesn't. If a specific feature is not listed at all, there is a chance it actually works.</p>"},{"location":"roadmap/#choosing-a-distribution","title":"Choosing a Distribution","text":"<p>While technically it is not a limitation when installing Linux, different distributions do provide different levels of documentation, ease of use and polish.</p> <p>Arch Linux probably has the most documentation, both officially for the whole project in form of the Arch Wiki and in scope of the t2linux wiki with a really detailed and up to date install guide. On top of that there is also a work in progress <code>archinstall</code> script. Keep in mind however that the whole process is done in the command line.</p> <p>Manjaro has a more guided install experience, with a graphical installer and multiple prebuilt ISOs for different desktop environments. There are 2 versions of the Manjaro ISO built by different people. JPyke3's version, which is not recommended, and NoaHimesaka1873's which is newer and recommended.</p> <p>EndeavourOS is an Arch based Linux distribution with a graphical installer. This distribution requires little to no configuration after install.</p> <p>Ubuntu also has a graphical installer. Additionally, less post configuration work is required as some kernel modules are getting installed automatically.</p> <p>Fedora also has a prebuilt ISO and a graphical installer. Most things work out of the box, though audio and WiFi generally need to be set up as in the guides below. Then they should work flawlessly.</p> <p>NixOS has both prebuilt graphical and command line installers. Support for T2 devices is provided in the form of a <code>nixos-hardware</code> module. Importing the module is the only thing you have to do to get your configuration working on your Mac.</p> <p>If you wish to use another distribution, you can install it normally, also follow the steps to install the kernel yourself manually and follow the post installation steps.</p>"},{"location":"roadmap/#installing","title":"Installing","text":"<p>Follow the Pre-installation steps to prepare your Mac to install Linux and head over to the appropriate guide of the distro of your choice as mentioned in that guide.</p>"},{"location":"roadmap/#configuring-the-installation","title":"Configuring the Installation","text":"<p>After successfully booting into your new installation, you will need to configure a few things:</p> <ul> <li>Performing a basic setup</li> <li>Getting Wi-Fi and Bluetooth to work</li> <li>Install drivers for the fan (if not working automatically or want to force a certain speed)</li> <li>Configure audio</li> <li>Configure the Startup Manager (optional)</li> <li>Install rEFInd (optional)</li> </ul> <p>You might also want to look into getting the internal GPU to work if your Mac has two graphics cards. However, if you don't need it specifically, it's probably best to stick with the dedicated one. If your Mac only has a single graphics unit, you can ignore this.</p>"},{"location":"state/","title":"Introduction","text":"<p>While Linux is usable on all T2 models, some features are limited due to the lack of drivers or similar. This page should give a general overview of what is working and what is not.</p>"},{"location":"state/#working","title":"Working","text":"<ul> <li>Internal Drive / SSD: Support for the SSD has been upstreamed to the Linux Kernel</li> <li>Screen</li> <li>USB</li> <li>Keyboard</li> <li>Camera</li> <li>Wi-Fi (requires macOS firmware)</li> <li>Bluetooth (requires macOS firmware only for devices with BCM4377 chip. Also, Bluetooth glitches on devices with BCM4377 Chip if connected to a 2.4 Ghz Wi-Fi connection. Thus, in order to use Bluetooth either turn off your Wi-Fi or use a 5Ghz Wi-Fi connection.)</li> <li>Touch Bar: There is support for the \"Touch Bar Keyboard\" device configuration, where only the Function Keys or the Media/Brightness Control Keys can be shown. No other graphics can be shown on the Touchbar (this is what Windows with Bootcamp drivers uses).</li> <li>Suspend</li> </ul>"},{"location":"state/#partially-working","title":"Partially Working","text":"<ul> <li>Trackpad: Functions, but it is far from the experience on macOS (No force touch or palm rejection). Some models have deadzones on the edges of their trackpads where swipes along the trackpad that start in these deadzones will not be registered.</li> <li>Audio: With proper configuration audio can work, however it is not stable in some older kernels and switching between speakers and when using the microphone. Microphone volume is low in some Macs.</li> <li>Hybrid Graphics: If the device has a dedicated AMD GPU (15 and 16 inch MacBookPro's) as well as an Intel iGPU, the iGPU can be used, but this breaks resume, see the Hybrid Graphics page.</li> <li>AMD GPUs: Changing resolution, using DRI_PRIME and doing various other things can cause crashes, but <code>echo high | sudo tee /sys/bus/pci/drivers/amdgpu/0000:??:??.?/power_dpm_force_performance_level</code> or adding <code>amdgpu.dpm=0</code> to the kernel commandline stops these crashes.</li> <li>MacPro7,1: Users have encountered PCIE Address Space issues, with auto remap breaking.</li> </ul>"},{"location":"state/#not-working","title":"Not working","text":"<ul> <li>Custom graphics on Touchbar: There is currently no Linux driver for the Touchbar's \"Touch Bar Display\" device configuration, which is what macOS uses, and gives full control over the display to the Operating System.</li> <li>T2 Secure Enclave Processor (Touch ID, storing encryption keys on the T2)</li> <li>The T2's onboard Audio Video Encoder (used for Sidecar on macOS)</li> <li>Graphics switching without rebooting (gmux)</li> </ul>"},{"location":"state/#other","title":"Other","text":"<ul> <li>Linux using APFS filesystems: Linux cannot read the internal SSD's macOS APFS parition's Data and System volume (for other APFS volumes, linux-apfs-rw can be used for reading data, but attempting to write is risky).</li> <li>macOS using Linux filesystems: There are FUSE implementations of some Linux Filesystems that can be used on macOS (but again, most only have experemental write support).</li> </ul>"},{"location":"distributions/overview/","title":"Introduction","text":"<p>This is a landing page for the distribution specific guides contained in this wiki.</p> <ul> <li>Arch Linux</li> <li>EndeavourOS</li> <li>Fedora</li> <li>Gentoo</li> <li>Manjaro</li> <li>NixOS</li> <li>Ubuntu</li> <li>Debian, Linux Mint, Kali, Pop!_OS and other similar distros</li> </ul>"},{"location":"distributions/arch/faq/","title":"Updating Kernel","text":"<p><code>linux-mbp</code> is abandoned. Switch to <code>linux-t2</code> or <code>linux-xanmod-edge-t2</code> now if you're still using <code>linux-mbp</code>.</p> <p>Add new repositories to <code>/etc/pacman.conf</code>, by adding this:</p> <pre><code>[arch-mact2]\nServer = https://mirror.funami.tech/arch-mact2/os/x86_64\nSigLevel = Never\n</code></pre> <p>Then install new kernel and supporting packages by running this: <code>sudo pacman -Syu linux-t2 apple-t2-audio-config apple-bcm-firmware</code></p> <p>You can use Xanmod kernel instead by replacing <code>linux-t2</code> with <code>linux-xanmod-t2</code>. If you need header package, also install <code>linux-t2-headers</code> (or <code>linux-xanmod-t2-headers</code> if you chose to install Xanmod kernel).</p>"},{"location":"distributions/arch/faq/#building-kernel","title":"Building Kernel","text":"<pre><code>git clone https://github.com/NoaHimesaka1873/linux-t2-arch\ncd linux-t2-arch\nmakepkg -si\n</code></pre> <p>You can instead clone the other repos mentioned under Updating Kernel. You may need to change the folder you <code>cd</code> into.</p>"},{"location":"distributions/arch/installation/","title":"Installing Arch Linux on a Mac with the T2 Chip","text":"<p>You will need:</p> <ul> <li>USB drive with at least 1GB</li> <li>A way to plug it into your Mac (USB-C isn't USB-A)</li> </ul> <ol> <li> <p>Follow the Pre-installation steps.</p> </li> <li> <p>Boot into the live ISO.</p> </li> <li> <p>Follow the Arch Wiki guide from here up to \"Format the partitions\".</p> <ol> <li>You will need to reformat your partitions, except for the EFI partition. The other partitions will need to reformatted as described in the Arch Wiki Installation guide. For the EFI system partition (mentioned in a note on the Arch Wiki), there will be one at <code>/dev/nvme0n1p1</code> and you can use this if you don't intend to install Windows or already have it installed. If you do intend to triple boot, refer to this guide.</li> <li>Mount the EFI partition that you intend to use for your bootloader on <code>/mnt/boot/efi</code>, and your other partitions on <code>/mnt</code>, etc.</li> </ol> </li> <li> <p>Continue following the Arch Wiki's guide until \"Install essential packages\".</p> </li> <li> <p>Install the required packages into your new system.</p> <ul> <li> <p>Using pacstrap (more vanilla Arch experience)</p> <ol> <li> <p>Run <code>pacstrap /mnt base linux-t2 apple-t2-audio-config apple-bcm-firmware linux-firmware iwd grub efibootmgr tiny-dfr t2fand</code> (omit the <code>grub efibootmgr</code> packages from this if you intend to use systemd-boot as your bootloader). You can choose to use Xanmod kernel instead. In this case, replace <code>linux-t2</code> with <code>linux-xanmod-t2</code>.</p> </li> <li> <p>Add repository to <code>/mnt/etc/pacman.conf</code>, by adding this:</p> </li> </ol> <pre><code>[arch-mact2]\nServer = https://mirror.funami.tech/arch-mact2/os/x86_64\nSigLevel = Never\n</code></pre> </li> <li> <p>Using t2strap (easier)</p> <ol> <li>Run <code>t2strap /mnt base linux-firmware iwd grub efibootmgr</code> (omit the <code>grub efibootmgr</code> packages from this if you intend to use systemd-boot as your bootloader). You can choose to use Xanmod kernel instead. In this case, append <code>-k xanmod</code> (or <code>-k xanmod-lts</code> for Xanmod LTS) to <code>t2strap</code> command.</li> </ol> </li> </ul> </li> <li> <p>Continue following the Arch Wiki's guide until you get to installing a bootloader.</p> </li> <li> <p>Add <code>apple-bce</code> to the <code>MODULES</code> list in <code>/etc/mkinitcpio.conf</code>, and then run <code>mkinitcpio -P</code></p> </li> <li> <p>Enable <code>t2fand</code> and <code>tiny-dfr</code> by running:</p> </li> </ol> <pre><code>sudo systemctl enable t2fand\nsudo systemctl enable tiny-dfr\n</code></pre> <ol> <li> <p>Install a bootloader, GRUB is easier, but you can also use systemd-boot. Don't do both.</p> <ul> <li> <p>Installing Grub:</p> <ol> <li>Edit <code>/etc/default/grub</code>, you'll need to install a text editor (i.e. <code>vim</code> or <code>nano</code>) with <code>pacman -S PACKAGE_NAME</code> for this step.</li> <li>On the line with <code>GRUB_CMDLINE_LINUX=\"quiet splash\"</code>, add the following kernel parameters: <code>intel_iommu=on iommu=pt pcie_ports=compat</code></li> <li>Run <code>grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --removable</code>.</li> <li>Run <code>grub-mkconfig -o /boot/grub/grub.cfg</code> to generate configuration file.</li> </ol> </li> <li> <p>Installing systemd-boot:</p> <ol> <li>Follow the Arch wiki's instructions. You will want <code>--path=/boot/efi</code> as an argument to <code>bootctl</code> if you mounted your EFI partition there. Also make sure you configure it to boot the <code>linux-t2</code> kernel.</li> <li>Install a text editor (i.e. <code>pacman -S vim</code> or <code>pacman -S nano</code>), and make the following edit for <code>.conf</code> files in <code>/boot/efi/loader/entries/</code>.</li> <li>Add <code>intel_iommu=on iommu=pt pcie_ports=compat</code> to the <code>options</code> line to add those kernel parameters.</li> </ol> </li> </ul> </li> <li> <p>Exit the <code>chroot</code> (Control-d, or <code>exit</code>) and reboot. You now will be able to select your Arch install in the macOS Startup Manager by holding option at boot.</p> </li> </ol>"},{"location":"distributions/debian/installation/","title":"Introduction","text":"<p>This guide shall help you in installing a Debian or Ubuntu based Linux distro, which is not available as a modified ISO with T2 support.</p> <p>Some popular distros include:</p> <ol> <li>Linux Mint</li> <li>Pop!_OS</li> <li>elementary OS</li> <li>Debian</li> <li>Zorin OS</li> <li>Kali Linux</li> <li>Other Ubuntu flavours like Ubuntu unity etc.</li> </ol>"},{"location":"distributions/debian/installation/#hardware-requirements","title":"Hardware Requirements","text":"<ul> <li>USB-C to USB adapter</li> <li>Wired internet connection (Ethernet/USB tethering) or Wi-Fi adapter compatible with Linux</li> <li>External keyboard and mouse</li> </ul>"},{"location":"distributions/debian/installation/#install-procedure","title":"Install Procedure","text":"<p>Installation fails when installing the bootloader (Eg: GRUB)</p> <p>It is possible that during installation, when the installer is installing the bootloader (GRUB in most cases), the installation may fail. This is because the distro's ISO is using an old Linux kernel which doesn't support writing to the NVRAM of T2 Macs. In such a case, boot into the ISO again. When the initial menu gets displayed having options to try/install the distro, press \"e\" on the option you otherwise would have chosen to install. This will open the command line. Add <code>efi=noruntime</code> to the command line and press \"F10\" to boot. This should fix the issue.</p> <p>Pop!_OS</p> <p>Due to a bug in Pop!_OS installer, the partition sizes shown are incorrect during manual partitioning step. As a workaround, you may follow the instructions given in this GitHub issue in the live ISO environment to fix the installer and then start the installation.</p> <ol> <li>Follow the Pre-installation steps to prepare your Mac for installation.</li> <li>Boot into the Live ISO. You should now be in the GRUB boot menu. Select the option which is relevent to you.</li> <li>Start the installer and install it like normal until you get an option to manually specify partitions.</li> <li> <p>Find the partition you made for Linux when you were following the Pre-installation steps. MAKE SURE TO SELECT THE RIGHT PARTITION OR ELSE YOUR DATA WILL BE LOST. Delete it to make free space. You'll need to make these partitions:</p> <ol> <li> <p>If you want, you can make seperate partitions for swap, <code>/home</code>, <code>/boot</code> etc as you do in a normal PC.</p> </li> <li> <p>The partition to be made compulsorily is the one mounted at <code>/</code> and formatted to ext4 or btrfs.</p> </li> <li> <p>If the installer used by your distro is <code>ubiquity</code>, which is the one used in Ubuntu, Linux Mint etc., then you can leave EFI Boot alone. If you are using a separate EFI partition, then you shall have to separate it out after installation by following this guide.</p> <p>For other installers, you need to mount <code>nvme0n1p1</code>, or your separate EFI partition (whatever case applies to you) at <code>/boot/efi</code>. If the installer supports the \"boot\" flag, set it as well for your EFI partition.</p> </li> </ol> </li> <li> <p>Continue the rest of the setup.</p> </li> <li>Once it's finished, you can reboot without your installation media. Hold down Option (\u2325) while booting, then select EFI Boot and press enter.</li> </ol>"},{"location":"distributions/debian/installation/#adding-t2-support","title":"Adding T2 support","text":"<p>After installation, we need to install a kernel having patches to support the T2 Macs for the internal keyboard, trackpad, touchbar, audio, Wi-Fi etc. to work. In order to do so:</p> <ol> <li> <p>Boot into your new installation.</p> </li> <li> <p>Connect to the internet using Ethernet/USB tethering/external Wi-Fi adapter.</p> </li> <li> <p>Add the t2-ubuntu-repo apt repo by running:</p> <pre><code>curl -s --compressed \"https://adityagarg8.github.io/t2-ubuntu-repo/KEY.gpg\" | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/t2-ubuntu-repo.gpg &gt;/dev/null\nsudo curl -s --compressed -o /etc/apt/sources.list.d/t2.list \"https://adityagarg8.github.io/t2-ubuntu-repo/t2.list\"\nsudo apt update\n</code></pre> </li> <li> <p>Now install the kernel upgrade script.</p> <ul> <li>If your distro is Ubuntu based, run:</li> </ul> <pre><code>sudo apt install t2-kernel-script\n</code></pre> <ul> <li>If your distro is Debian based, run:</li> </ul> <pre><code>sudo apt install t2-kernel-script-debian\n</code></pre> </li> <li> <p>Then upgrade your kernel to a T2 kernel by running:</p> <pre><code>update_t2_kernel\n</code></pre> </li> <li> <p>Install the audio configuration files by running:</p> <pre><code>sudo apt install apple-t2-audio-config\n</code></pre> <p>Note: If your distro is using PulseAudio by default, consider switching to PipeWire as mentioned in the audio guide.</p> </li> <li> <p>Follow the Wi-Fi guide to get internal Wi-Fi working.</p> </li> <li> <p>If your Mac has a Touch Bar, install <code>tiny-dfr</code> by running:</p> <pre><code>sudo apt install tiny-dfr\n</code></pre> <p>Note: Make sure you restart your Mac after installing <code>tiny-dfr</code>. In order to configure your Touch Bar, run <code>sudo touchbar</code> and follow the on-screen instructions.</p> </li> </ol>"},{"location":"distributions/debian/installation/#basic-set-up","title":"Basic set up","text":"<p>After installing the new kernel, follow the Basic setup guide. You shall mainly have to follow the Add necessary kernel parameters and Make modules load on boot sections. If using disk encryption (LUKS), then follow the Make modules load on early boot section as well. Rest have been set up automatically by the kernel upgrade script.</p>"},{"location":"distributions/endeavouros/installation/","title":"Installing EndeavourOS on a Mac with the T2 Chip","text":"<p>You will need:</p> <ul> <li>USB drive with at least 4GB</li> <li>A way to plug it into your Mac (USB-C isn't USB-A)</li> <li>A wired internet connection (i.e. USB-C to Enternet dongle) or Wi-Fi.</li> </ul> <ol> <li> <p>Follow the Pre-installation steps to prepare your Mac for the installation.</p> </li> <li> <p>Boot into the ISO and start the Calamares installer</p> <ol> <li>If you're not connected to the internet, connect to it now. Use included GUI config tool to connect to Wi-Fi.</li> <li> <p>On the \"Welcome\" window, choose...</p> <ol> <li>\"Install community editions\" if you want to install community edition.</li> <li>\"Start the Installer\" if you want to install normal edition.</li> </ol> </li> <li> <p>If you chose to install normal edition, choose \"Online\" or \"Offline\" depending on your needs.</p> </li> </ol> </li> <li> <p>Follow the installer until Partitions.</p> <ol> <li>Select \"Manual partitioning.\"</li> <li>Select \"/dev/nvme0n1p1\" partition, set the \"boot\" flag, and set it to mount under \"/boot/efi\". If you want to use separate EFI partition, check out this guide.</li> <li>Use remaining partition space to your convenience.</li> </ol> </li> <li> <p>Follow the rest of the installer and reboot.</p> </li> <li> <p>You can follow the Fan guide after rebooting into your install if your fan isn't working or if you want to customize how/when your fan will run.</p> </li> <li> <p>You now will be able to select your EndeavourOS install in the macOS Startup Manager by holding option at boot.</p> </li> </ol>"},{"location":"distributions/fedora/faq/","title":"Installing alongside Windows","text":"<p>If you already have Bootcamp installed, you might notice that the boot option for Bootcamp instead boots you into Fedora. This is because GRUB automatically shares with a Windows installation. Follow this guide on triple booting to get Windows working again.</p>"},{"location":"distributions/fedora/faq/#my-boot-hangs-before-getting-to-the-installer","title":"My boot hangs before getting to the installer","text":"<p>This may be due to differences between USB-C to USB-A adapters. Try a different one if it is not working.</p>"},{"location":"distributions/fedora/faq/#my-touchbar-is-blank","title":"My touchbar is blank","text":"<p>Follow the instructions in the post-install guide. If it still is not working, try updating your macOS instalation.</p>"},{"location":"distributions/fedora/faq/#my-keyboard-wont-light-up-only-applies-to-some-hardware","title":"My keyboard won't light up (only applies to some hardware)","text":"<p>This sometimes doesn't work on Fedora, we are working on a fix. For now, you can't really do anything about it. This is only affects the internal Apple keyboard, it will not affect your external keyboard. This also only occurs on Fedora, the backlight works on all other ditros.</p>"},{"location":"distributions/fedora/faq/#i-get-an-error-about-the-bootloader-when-installing","title":"I get an error about the bootloader when installing","text":"<p>Download the latest ISO, then try again. Make sure you are using the T2 Fedora iso.</p>"},{"location":"distributions/fedora/faq/#my-wi-fi-stops-working-after-suspending","title":"My Wi-Fi stops working after suspending","text":"<p>Try running <code>sudo modprobe -r brcmfmac &amp;&amp; sudo modprobe brcmfmac</code> in a terminal.</p>"},{"location":"distributions/fedora/home/","title":"Home","text":"<p>Welcome to the T2 Fedora wiki!</p> <p>Follow the installation guide to get started. If you need help, join the t2linux discord server server and ask in <code>#fedora</code> over there. Alternately, you can open an issue in the github issue tracker. You can also refer to the FAQ to fix common problems.</p>"},{"location":"distributions/fedora/installation/","title":"Download the latest safe release","text":"<p>Many thanks to Mike for building. You can download a live iso from Mikeeq here.</p> <p>If you need a more updated kernel, use the iso from sharpenedblade. Remember to follow the Wi-Fi guide.</p>"},{"location":"distributions/fedora/installation/#hardware-requirements","title":"Hardware Requirements","text":"<ul> <li>USB-C to USB adapter. Important: different USB-C to USB adapters work differently - if you're stuck before getting to the graphical UI during boot this may be the problem.</li> </ul>"},{"location":"distributions/fedora/installation/#install-procedure","title":"Install Procedure","text":"<p>(These instructions are re-used from the Manjaro installation guide)</p> <ol> <li>Follow the Pre-Install guide.</li> <li>Once booted into Fedora, follow the Wi-Fi guide.</li> <li>Use the installer like normal until you get to the partitioning step.</li> <li>When you get to partitioning, click on the manual partitioning option. Find the partition you made before by following the pre-install guide. MAKE SURE TO SELECT THE RIGHT PARTITION OR ELSE YOUR DATA WILL BE LOST. Delete it to make free space.</li> <li>Click on the automatically create mount points option.</li> <li>Continue with the rest of the installation.</li> <li>Once it's finished, you can reboot without your installation media. Hold down Option (\u2325) while booting, then select EFI Boot and press enter.</li> <li>Welcome to Fedora! :)</li> <li>Once you're booted and in your desktop, set up Wi-Fi to finish the installation.</li> </ol>"},{"location":"distributions/gentoo/installation/","title":"Installing Gentoo Linux on a T2 Mac","text":""},{"location":"distributions/gentoo/installation/#install-procedure","title":"Install Procedure","text":"<ol> <li> <p>Follow the Pre-installation steps.</p> <ol> <li>Since there is not yet a T2 Gentoo Installation ISO, you will need to use a different ISO. We recommend the T2-Ubuntu ISO if you want a graphical environment, or the T2-Archiso if you don't want to have to copy Wi-Fi firmware to the livecd.</li> <li>If you chose the Ubuntu ISO, follow the Wi-Fi Guide once booted.</li> </ol> </li> <li> <p>Connect to the internet using NetworkManager in the Ubuntu ISO, or using <code>iwctl</code> in the Arch ISO.</p> </li> <li> <p>You will need to reformat your partitions, except for the EFI partition. The other partitions will need to reformatted as described in the Gentoo Handbook. For the EFI system partition there will be one at <code>/dev/nvme0n1p1</code> and you can use this if you don't intend to install Windows or already have it installed. If you do intend to triple boot, refer to this guide.</p> </li> <li> <p>Follow the Gentoo Handbook from Installing stage3 until Kernel Configuration and Compilation.</p> </li> <li> <p>Setup the T2 Gentoo overlay:</p> <ol> <li> <p>Install <code>dev-vcs/git</code> and <code>app-eselect/eselect-repository</code>, then enable and sync the overlay:</p> <pre><code>emerge -av app-eselect/eselect-repository dev-vcs/git\neselect repository add t2 git https://codeberg.org/vimproved/t2-overlay.git\nemerge --sync t2\necho \"*/*::t2\" &gt;&gt; /etc/portage/package.accept_keywords/t2\n</code></pre> </li> </ol> </li> <li> <p>Install the T2 Gentoo kernel:</p> <ol> <li> <p>The T2 overlay provides a Distribution Kernel for T2 Macs. To install it, run <code>emerge -av sys-kernel/t2gentoo-kernel</code>.</p> </li> <li> <p>Alternatively, you can use the kernel sources and manually compile. With this method, the update process is not automated, and manual configuration is necessary. However, <code>sys-kernel/t2gentoo-sources</code> tends to get new kernel versions faster then <code>sys-kernel/t2gentoo-kernel</code>. To install it, run: <code>emerge -av sys-kernel/t2gentoo-sources</code>. After installing the kernel sources, run <code>eselect kernel set 1</code> to point <code>/usr/src/linux</code> to the correct path, then follow the directions in the Manual Configuration section of the handbook. If you decide to manually configure your kernel, make sure the following options are set:</p> <pre><code>CONFIG_APPLE_BCE=m\nCONFIG_APPLE_GMUX=m\nCONFIG_IRQ_REMAP=y\nCONFIG_HID_APPLE_IBRIDGE=m\nCONFIG_HID_APPLE=m\nCONFIG_HID_APPLE_MAGIC_BACKLIGHT=m\nCONFIG_HID_APPLE_TOUCHBAR=m\nCONFIG_HID_SENSOR_ALS=m\nCONFIG_SND_PCM=m\n# For WiFi\nCONFIG_BRCMFMAC=m\n# For Bluetooth\nCONFIG_BT_BCM=m\nCONFIG_BT_HCIBCM4377=m\nCONFIG_BT_HCIUART_BCM=y\nCONFIG_BT_HCIUART=m\n</code></pre> </li> </ol> </li> <li> <p>Install Wi-Fi firmware for T2 Macs:</p> <ol> <li> <p>The T2 overlay provides a package for T2 Wi-Fi firmware. To install it, run:</p> <pre><code>mkdir -p /etc/portage/package.license\necho \"sys-firmware/apple-bcm-firmware all-rights-reserved\" &gt;&gt; /etc/portage/package.license/firmware\nemerge -av sys-firmware/apple-bcm-firmware\n</code></pre> </li> </ol> </li> <li> <p>Follow the Gentoo Handbook from Configuring the System up to Configuring the bootloader</p> </li> <li> <p>Install the bootloader:</p> <ol> <li>Choose a bootloader (other than LILO) from the Configuring the bootloader section of the Gentoo Handbook.</li> <li>Add <code>intel_iommu=on iommu=pt pcie_ports=compat</code> to the kernel parameters. Refer to the Gentoo Wiki article for your bootloader of choice for instructions on how to do this.</li> </ol> </li> <li> <p>Exit the <code>chroot</code> (Control-d, or <code>exit</code>) and reboot. You should now be able to select Gentoo from the macOS startup manager by holding option at boot. Congratulations, you should now have a working Gentoo installation! For your next steps, read through the rest of the Gentoo Handbook and consider installing a desktop environment such as GNOME, KDE, or Xfce.</p> </li> </ol>"},{"location":"distributions/manjaro/deprecation/","title":"Why is Manjaro T2 deprecated?","text":"<p>Due to concerns, Manjaro T2 is deprecated. If you want to maintain it yourself, come to our Discord and we will help.</p>"},{"location":"distributions/manjaro/deprecation/#what-distro-should-i-use-instead","title":"What distro should I use instead?","text":"<p>We recommend EndeavourOS.</p>"},{"location":"distributions/manjaro/deprecation/#what-do-i-do-after-manjaro-is-deprecated","title":"What do I do after Manjaro is deprecated?","text":"<p>No support for installation will be provided starting from 2023. If you want to install Manjaro on your Mac after 2023, you're on your own.</p> <p>For kernel for existing installation, until the end of 2023. LTS will be supported longer for those who can't switch for whatever reason.</p>"},{"location":"distributions/manjaro/faq/","title":"Deprecation Notice","text":"<p>Manjaro T2 support is deprecated. See Deprecation Plan for more information.</p>"},{"location":"distributions/manjaro/faq/#migrating-from-pykees-old-kernel-to-new-kernel","title":"Migrating from Pykee's old kernel to new kernel","text":"<p>Run this in your terminal:</p> <pre><code>cat &lt;&lt; EOF | sudo tee -a /etc/pacman.conf\n[manjaro-mact2]\nSigLevel = Never\nServer = https://mirror.funami.tech/manjaro-mact2/os/x86_64\nEOF\nsudo pacman --ignore zfs-utils -Syu linux519-t2 linux519-t2-headers apple-bcm-wifi-firmware\n</code></pre> <p>After running this, remove old repository and reboot.</p>"},{"location":"distributions/manjaro/faq/#upgrading-to-newer-kernel-recommended","title":"Upgrading to newer kernel (recommended)","text":"<p>Users using older kernel are advised to migrate to newest kernel since newer kernel has more support.</p> <p>Join our Discord or enable notifications for this repository to get pings for new kernel.</p>"},{"location":"distributions/manjaro/faq/#installing-alongside-windows","title":"Installing alongside Windows","text":"<p>If you want both Manjaro and Windows installed on your system, refer to this guide on triple booting as you install.</p>"},{"location":"distributions/manjaro/faq/#switch-touchbar-to-function-keys","title":"Switch Touchbar to Function Keys","text":"<p>Run this in your terminal:</p> <pre><code>sudo bash -c \"echo 2 &gt; /sys/class/input/*/device/fnmode\"\n</code></pre>"},{"location":"distributions/manjaro/home/","title":"Deprecation Notice","text":"<p>Manjaro T2 support is deprecated. See Deprecation Plan for more information.</p>"},{"location":"distributions/manjaro/home/#welcome-to-the-manjaro-t2-wiki","title":"Welcome to the Manjaro T2 wiki!","text":"<p>Click here to get started.</p>"},{"location":"distributions/manjaro/installation/","title":"Deprecation Notice","text":"<p>Manjaro T2 support is deprecated. See Deprecation Plan for more information.</p>"},{"location":"distributions/manjaro/installation/#download-a-latest-release","title":"Download a latest release","text":"<p>See releases</p>"},{"location":"distributions/manjaro/installation/#hardware-requirements","title":"Hardware Requirements","text":"<ul> <li>USB-C to Ethernet cable adapter.<ul> <li>While you can install Manjaro over WiFi, it would be a lot easier to use an Adapter during the installation process.</li> </ul> </li> <li>USB-C to USB Adapter</li> <li>USB drive</li> </ul>"},{"location":"distributions/manjaro/installation/#install-procedure","title":"Install Procedure","text":"<ol> <li>Follow the Pre-installation steps to prepare your Mac for installing Manjaro.</li> <li>Boot into the ISO.</li> <li>Scroll down to <code>Boot x86 64 {Your Edition}</code> using the arrow keys and press enter.</li> <li>Open the installer and proceed normally until you arrive at the partitioning stage (the Installer will automatically start if you have used the second set of commands given above).</li> <li>Click Manual Partitioning.</li> <li>Click on <code>/dev/nvme0n1p1</code>, then press edit at the bottom of the install window, change the mount point to <code>/boot/efi</code>, and then click ok.</li> <li>Usually, the macOS partition is <code>/dev/nvme0n1p2</code> (the <code>Apple APFS</code> Partition). Ignore this partition.</li> <li>Delete the partition you created before - this is usually mounted to <code>/dev/nvme0n1p3</code>.</li> <li> <p>These next steps involve partitioning the <code>/boot</code>(boot), <code>/</code>(Root) and <code>/home</code>(Home) partitions of your Linux filesystem. If you know what you're doing, feel free to skip to step 15.</p> <ul> <li>Create a <code>2000 MiB</code> partition with <code>ext4</code> as the file system. Change the mount point to <code>/boot</code> and click ok.</li> <li>Create a <code>51200 MiB</code> partition with <code>ext4</code> as the file system. Change the mount point to <code>/</code> and click ok.</li> <li>Use the remaining disk space to create an <code>ext4</code> file system. Change the mount point to <code>/home</code>.</li> </ul> </li> <li> <p>Continue the rest of the setup as normal. Once the setup process is complete, restart your computer. Make sure you remove the install medium once powered off.</p> </li> <li>Once again, power on your computer whilst holding the Option (\u2325) key. Then select EFI Boot.</li> <li>Welcome to Manjaro :)</li> </ol>"},{"location":"distributions/nixos/installation/","title":"NixOS Installation","text":"<p>Pre-Installation Guide</p> <p>This guide assumes that you have followed the pre-installation guide.</p> <ol> <li> <p>Partition your disk using <code>cfdisk</code> or the tool of your preference, initialize the partitions with the <code>mkfs</code> command of the filesystem you want (<code>mkswap</code> is for swap) and mount them under <code>/mnt</code>.</p> <p>Note: You might want to leave a little part of your disk as a FAT32 partition to be able to transfer files easily between MacOS and Linux.</p> </li> <li> <p>To connect to internet, you should load the firmware with these commands first:</p> <pre><code>sudo mkdir -p /lib/firmware/brcm\nsudo cp /mnt/boot/firmware/* /lib/firmware/brcm\nsudo modprobe -r brcmfmac &amp;&amp; sudo modprobe brcmfmac\n</code></pre> <p>Then run <code>systemctl start wpa_supplicant</code> and then connect to internet using <code>wpa_cli</code>. When running the commands, don't forget to change <code>/mnt/boot</code> to the place you mounted your ESP at (for example <code>/mnt/boot/efi</code>).</p> </li> <li> <p>Generate your configuration using <code>sudo nixos-generate-config --root /mnt</code>.</p> </li> <li> <p>Edit <code>/mnt/etc/nixos/configuration.nix</code>:</p> <ul> <li>Add <code>\"${builtins.fetchGit { url = \"https://github.com/NixOS/nixos-hardware.git\"; }}/apple/t2\"</code> to <code>imports</code>.</li> <li> <p>Copy the WiFi/Bluetooth firmware to <code>/mnt/etc/nixos/firmware/brcm</code> and add this snippet to your <code>configuration.nix</code>:</p> <pre><code>hardware.firmware = [\n  (pkgs.stdenvNoCC.mkDerivation {\n    name = \"brcm-firmware\";\n\n    buildCommand = ''\n      dir=\"$out/lib/firmware\"\n      mkdir -p \"$dir\"\n      cp -r ${./files/firmware}/* \"$dir\"\n    '';\n  })\n];\n</code></pre> </li> <li> <p>Add a bootloader, <code>systemd-boot</code> works quite well. If you want to use <code>GRUB</code>, don't forget to set <code>boot.grub.efiInstallAsRemovable</code>, <code>boot.grub.efiSupport</code> to <code>true</code> and <code>boot.grub.device</code> to <code>\"nodev\"</code>.</p> </li> <li>Run <code>sudo nixos-install</code>.</li> </ul> </li> </ol> <p>And the installation is complete! Note that you should probably transition to a more structured configuration using flakes, that is omitted here for brevity.</p>"},{"location":"distributions/ubuntu/faq/","title":"Why does my MacBook turn off in the middle of the Ubuntu installation?","text":"<p>This seems to happen with certain MacBooks because the GRUB bootloader installer tries accessing the efivars/nvram, which Apple doesn't allow and the installer doesn't know what to do.</p> <p>There is a way to stop this. Boot into the installation media with an External USB Keyboard plugged in. Press e when you selected the \"Try Ubuntu without installing\" option.</p> <p>Scroll to the bottom with the arrow keys, and type in <code>efi=noruntime</code>. With the External keyboard, then press CTRL+X or F10 to boot into the Live Media. The installation should work fine now.</p> <p>This issue has occured for anyone on the 16,1 and maybe the 16,4.</p>"},{"location":"distributions/ubuntu/faq/#making-the-grub-menu-appear","title":"Making the GRUB Menu appear","text":"<p>The GRUB bootloader by default turns off the GRUB Menu. This means you can't boot into Bootcamp Windows if it's installed. This can be easily fixed after Ubuntu is fully installed.</p> <p>In a Terminal in Ubuntu, edit file <code>/etc/default/grub</code> with any preferred editior (nano/vim) and with root permissions. Change line <code>GRUB_TIMEOUT_STYLE</code> to <code>GRUB_TIMEOUT_STYLE=MENU</code>. Save the file once you're done.</p> <p>We've now changed the GRUB Bootloader settings, but we now need to update GRUB to apply these changes. Type in <code>sudo update-grub</code> and hit enter. After the command is done, you're finished.</p>"},{"location":"distributions/ubuntu/faq/#installing-alongside-windows","title":"Installing alongside Windows","text":"<p>If you already have Bootcamp installed, you might notice that the boot option for Bootcamp instead boots you into Ubuntu. This is because GRUB automatically shares with a Windows installation. Follow this guide on triple booting to get Windows working again.</p>"},{"location":"distributions/ubuntu/faq/#why-isnt-sound-working","title":"Why isn't sound working?","text":"<p>On Ubuntu 22.04 or earlier, PulseAudio is installed by default, which performs really bad with T2 audio configuration files. It is suggested to switch to PipeWire for better performance, although its still bad as compared to Ubuntu 22.10, which has native support for PipeWire.</p> <p>On Ubuntu 22.10 or later, PipeWire is support natively and works just fine with audio configuration files. Still, it's recommended to use the upstream version of PipeWire since it is found to perform better and has more features than the native one. You can run the following commands to use the upstream version:</p> <pre><code>sudo add-apt-repository ppa:pipewire-debian/pipewire-upstream\nsudo apt install pipewire pipewire-audio-client-libraries libpipewire-0.3-modules libspa-0.2-{bluetooth,jack,modules} pipewire{,-{audio-client-libraries,pulse,bin,tests}}\n</code></pre>"},{"location":"distributions/ubuntu/faq/#why-there-are-no-wi-fi-networks-in-scan-list","title":"Why there are no Wi-Fi networks in scan list","text":"<p>In some cases users are not getting even a single Wi-Fi network listed when attempting to connect to a network, inspite of having followed the Wi-Fi guide completely and correctly.</p> <p>To fix this:</p> <ol> <li> <p>Edit <code>/etc/NetworkManager/NetworkManager.conf</code> to look like this:</p> <pre><code>[main]\nplugins=ifupdown,keyfile\n\n[ifupdown]\nmanaged=false\n\n[device]\nwifi.scan-rand-mac-address=no\n</code></pre> </li> <li> <p>Now edit <code>/etc/NetworkManager/conf.d/wifi_backend.conf</code> to look like this:</p> <pre><code>#[device]\n#wifi.backend=iwd\n</code></pre> </li> <li> <p>Finally run <code>sudo systemctl restart NetworkManager</code>.</p> </li> </ol>"},{"location":"distributions/ubuntu/faq/#how-do-i-upgrade-my-kernel","title":"How do I upgrade my kernel","text":"<p>Ubuntu based distro users can upgrade their kernel with these instructions.</p> <p>Debian based distro users can upgrade their kernel with these instructions.</p>"},{"location":"distributions/ubuntu/home/","title":"Home","text":"<p>Welcome to the T2 Ubuntu wiki!</p> <p>Follow the installation guide to get started. If you need help, join the t2linux discord server server and ask in <code>#ubuntu</code> over there. Alternately, you can open an issue in the GitHub issue tracker. You can also refer to the FAQ to fix common problems.</p>"},{"location":"distributions/ubuntu/installation/","title":"Download the latest release","text":"<p>Blank screen on boot</p> <p>Ubuntu's GRUB is not booting using the Mac Startup Manager for many users. Thus affected users are advised to install the rEFInd Boot Manager and boot the kernel using it instead of the Startup Manager.</p> <p>Download here</p>"},{"location":"distributions/ubuntu/installation/#hardware-requirements","title":"Hardware Requirements","text":"<ul> <li>USB-C to USB adapter</li> </ul>"},{"location":"distributions/ubuntu/installation/#install-procedure","title":"Install Procedure","text":"<ol> <li>Follow the Pre-installation steps to prepare your Mac for Ubuntu.</li> <li>Boot into the Live ISO. You should now be in the GRUB boot menu. Select the option which is relevent to you.</li> <li>Start the installer and install it like normal until you get to the partition option.</li> <li> <p>Find the partition you for Linux when you were following the Pre-installation steps. MAKE SURE TO SELECT THE RIGHT PARTITION OR ELSE YOUR DATA WILL BE LOST. Delete it to make free space. You'll need to make these partitions:</p> <ol> <li> <p>If you want, you can make seperate partitions for swap, <code>/home</code>, <code>/boot</code> etc as you do in a normal PC.</p> </li> <li> <p>The only partition to be made compulsorily is the one mounted at <code>/</code> and formatted to ext4 or btrfs.</p> </li> <li> <p>Leave EFI boot alone. If you want to use a separate EFI partition, you can separate it out later after installation as instructed here.</p> </li> </ol> </li> <li> <p>Continue the rest of the setup.</p> </li> <li>Once it's finished, you can reboot without your installation media. Hold down Option (\u2325) while booting, then select EFI Boot and press enter.</li> <li>Welcome to Ubuntu! :)</li> </ol>"},{"location":"distributions/ubuntu/installation/#receiving-kernel-updates","title":"Receiving kernel updates","text":"<p>In order to continue receiving the kernel updates for T2 kernels, it's recommended to set up the kernel update script as described here.</p>"},{"location":"distributions/ubuntu/installation/#configuring-the-touch-bar","title":"Configuring the Touch Bar","text":"<p>If your Mac has a Touch Bar, then you can install the <code>tiny-dfr</code> app by running <code>sudo apt update &amp;&amp; sudo apt install tiny-dfr</code> to set up the Touch Bar. Make sure you restart your Mac after installing the app.</p> <p>For configuration of the Touch Bar, run <code>sudo touchbar</code> and follow the on-screen instructions.</p>"},{"location":"distributions/ubuntu/installation/#troubleshooting","title":"Troubleshooting","text":"<p>If you are facing issues while installing or have post installation issues (E.g.: Wi-Fi, sound etc.), refer to the FAQ section first. If it is not able to help you, you may open an issue here or contact us on the Discord server.</p>"},{"location":"guides/audio-config/","title":"Introduction","text":"<p>This page explains how to get the config files for using the T2 audio device, which allows use of the 3.5mm headphone port, the built in speakers, the built in mic and the headphones' mic.</p> <p>Firstly, check whether you are using an updated <code>apple-bce</code> version by running <code>sed -n \"s/.*\\(AppleT2.*\\) -.*/\\1/p\" /proc/asound/cards</code>. If the output is <code>AppleT2xN</code> (where <code>N</code> is a number), then this guide can be followed. If it's just <code>AppleT2</code>, then either update the driver first or follow the older version of this guide.</p> <p>If there is no output at all, follow the instructions on how to setup the BCE module.</p>"},{"location":"guides/audio-config/#enable-pass-through-kernel-parameters","title":"Enable Pass-Through Kernel Parameters","text":"<p>Cat <code>cat /proc/cmdline</code> and ensure that your kernel parameters contain <code>intel_iommu=on iommu=pt pcie_ports=compat</code>.</p> <p>If not present, you'll have to update your bootup kernel params:</p> <ul> <li>edit <code>/etc/default/grub</code> and update <code>GRUB_CMDLINE_LINUX</code> to include <code>intel_iommu=on iommu=pt pcie_ports=compat</code></li> <li>Apply your edits by running <code>sudo update-grub</code> on ubuntu or <code>sudo grub-mkconfig -o /boot/grub/grub.cfg</code> for other distros<ul> <li>Note that, <code>grub</code>'s command line interface names might differ on different distros, if the commands like <code>grub-xxx</code> are not found, try <code>grub2-xxx</code> alternatives instead. For example, it should be <code>sudo grub2-mkconfig ...</code> instead of <code>sudo grub-mkconfig ...</code> on Fedora 36.</li> </ul> </li> <li>Reboot and ensure <code>cat /proc/cmdline</code> contains those params</li> </ul> <p>systemd-boot</p> <p>If you use systemd-boot you'll instead edit your boot conf files to add <code>intel_iommu=on iommu=pt pcie_ports=compat</code> to the options line. The files to edit will have the <code>.conf</code> extension and be in the loader/entries/ folder on your EFI partition. This will most likely be <code>/boot/efi/loader/entries</code></p>"},{"location":"guides/audio-config/#audio-configuration-files","title":"Audio Configuration Files","text":"<p>Simply run the following to set up audio:</p> <pre><code>sudo git clone https://github.com/kekrby/t2-better-audio.git /tmp/t2-better-audio\ncd /tmp/t2-better-audio\n./install.sh\nsudo rm -r /tmp/t2-better-audio\n</code></pre> <p>If your distro uses PulseAudio by default, consider switching to PipeWire with rtkit for the best possible experience. You can still use PulseAudio but the experience will not be as smooth as PipeWire, for example you might not be able to select the speakers as the output device when headphones are plugged in.</p> <p>Switching to headphones automatically</p> <p>If you want headphones to be switched to automatically when they are plugged in, you should set them as the default audio sink using the settings app of your DE, <code>pavucontrol</code>, <code>pactl</code> or <code>wpctl</code>.</p>"},{"location":"guides/audio-config/#internal-microphones-dsp-configuration","title":"Internal microphones DSP Configuration.","text":"<p>In order adjust the microphones signal automatically, we can use the following Pipewire filterchain config:</p> <p>Microphones config instructions</p>"},{"location":"guides/audio-config/#issues","title":"Issues","text":"<ul> <li>Some people are unable to get audio input to work. You may have to use a separate microphone.</li> </ul>"},{"location":"guides/audio-config/#kde","title":"KDE","text":"<p>The \"Audio Volume\" dialog / Audio in System Settings allow users to \"Raise maximum volume\", allowing to go past 100%. This does not offer a great deal of flexibility, it might work for getting acceptable recordings however.</p>"},{"location":"guides/audio-config/#easyeffects-with-pipewire","title":"EasyEffects with PipeWire","text":"<p>EasyEffects is a tool to control and modify audio streams when using PipeWire. Compared to the KDE approach mentioned above using input plugins like \"Autogain\" offers a lot more fine grain control and higher volume boosts.</p>"},{"location":"guides/audio-config/#speakers","title":"Speakers","text":"<p>All of apple's fancy tuning of the speakers is done in macOS, but a similar configuration is currently available for only the MacBook Pro 16 inch 2019.</p>"},{"location":"guides/audio-config/#macbook-pro-16-2019","title":"MacBook Pro 16\" 2019","text":"<p>Currently we have an experimental DSP (Digital Signal Processing) config for MacBook Pro 16\" 2019 with 6 speakers. Note that each model needs specific settings. Do not use it with other models as it could damage the speakers. Also do not expect same sound quality as in macOS.</p> <p>DSP config instructions</p>"},{"location":"guides/fan/","title":"Introduction","text":"<p>This page is a step by step guide to get fan control working on T2 Macs.</p> <p>In some Macs, the fan has been found to work out of the box. In such a case the driver is not required until you want to force a certain speed or do some other configuration which can be done by the help of this driver.</p>"},{"location":"guides/fan/#steps","title":"Steps","text":"<ol> <li> <p>Install <code>t2fand</code>.</p> <ul> <li> <p>If you're using Arch based distros:</p> <ol> <li> <p>Check if you installed Arch using our guide or added our repositories. If you haven't done that, follow this guide first.</p> </li> <li> <p>Install the package by running <code>sudo pacman -S t2fand</code>. (Do note that EndeavourOS Cassini Nova R1 already includes t2fand.)</p> </li> </ol> </li> <li> <p>If you're using Debian or Ubuntu based distros:</p> <ol> <li> <p>If you don't have t2-ubuntu-repo, follow this first to add the repository.</p> </li> <li> <p>Install the package by running <code>sudo apt install t2fand</code>.</p> </li> </ol> </li> <li> <p>If you're using other distributions:</p> <ol> <li> <p>Clone the repository by running <code>git clone https://github.com/NoaHimesaka1873/t2fand</code></p> </li> <li> <p>Change directory into the cloned repository.</p> </li> <li> <p>Install it by running <code>make install</code>.</p> </li> </ol> </li> </ul> </li> <li> <p>Enable daemon by running <code>sudo systemctl enable --now t2fand</code>.</p> </li> <li> <p>Edit the config and restart the daemon by running <code>sudo systemctl restart t2fand</code> if needed.</p> </li> </ol>"},{"location":"guides/fan/#configuration","title":"Configuration","text":"<p>The daemons config file can be found at <code>/etc/t2fand.conf</code>. You can change the activating temperature and/or fan curve to suit your needs. For more information, like how fan curves look like, check out the repository.</p>"},{"location":"guides/hybrid-graphics/","title":"Introduction","text":"<p>This page describes how to use the iGPU on MacBookPro's with Hybrid Graphics (2 GPUs). 13 inch MacBooks only have an iGPU, and do not need this. Using the iGPU means you can save power by putting the more powerful AMD dGPU in a low power state when you don't need it.</p> <p>This has been tested on the MacBookPro16,1 and the MacBookPro15,1. The 15,3 and 16,4 models are very similar and should work too.</p> <p>Make sure you have a t2 kernel of version greater than 6.6.2-2 (you can check this with <code>uname -r</code>).</p>"},{"location":"guides/hybrid-graphics/#issues","title":"Issues","text":"<p>If you experience system freezes, then the laptop's fans becoming loud, before the whole computer shuts off (CPU CATERR), or if the amdgpu is making the computer too hot, consider trying:</p> <ol> <li> <p>Set iGPU as main gpu (instructions below)</p> </li> <li> <p>Set AMD GPU Dynamic Power Management from auto to low or high. Low can be safer option to avoid thermal issues or save battery.</p> <p>You can test it quickly with: <code>echo low | sudo tee /sys/bus/pci/drivers/amdgpu/0000:0?:00.0/power_dpm_force_performance_level</code></p> <p>To apply the low level automatically, create <code>/etc/udev/rules.d/30-amdgpu-pm.rules</code> file with the following contents:</p> <pre><code>KERNEL==\"card0\", SUBSYSTEM==\"drm\", DRIVERS==\"amdgpu\", ATTR{device/power_dpm_force_performance_level}=\"low\"\n</code></pre> <p>To check which card is the amdgpu, we can run:</p> <pre><code>basename /sys/bus/pci/drivers/amdgpu/0000:0?:00.0/drm/card?\n</code></pre> <p>You can also control the AMD GPU DPM with GUI tools such as radeon-profile. For GPU intensive tasks like playing games, machine learning or rendering you can try setting the DPM to high instead.</p> </li> </ol>"},{"location":"guides/hybrid-graphics/#enabling-the-igpu","title":"Enabling the iGPU","text":"<ol> <li> <p>Configue apple-gmux to switch to the IGPU at boot</p> <ol> <li> <p>Create <code>/etc/modprobe.d/apple-gmux.conf</code> with the following contents:</p> <pre><code># Enable the iGPU by default if present\noptions apple-gmux force_igd=y\n</code></pre> </li> </ol> </li> <li> <p>Add <code>apple_set_os</code> as a kernel parameter to make Apple's firmware show the iGPU so that apple-gmux will be able to switch to it.</p> </li> </ol> <p><code>glxinfo | grep \"OpenGL renderer\"</code> should show an Intel GPU. Running programs with <code>DRI_PRIME=1</code> will make them render on your AMD GPU (some things do this automatically). You will get more battery time now as your AMD GPU can be turned off when not needed.</p>"},{"location":"guides/hybrid-graphics/#macbookpro164","title":"MacBookPro16,4","text":"<p>Currently the Radeon 5600M AMD GPU on MacBookPro16,4 is not working with Linux. As a workaround:</p>"},{"location":"guides/hybrid-graphics/#if-you-are-able-to-edit-your-kernel-command-line","title":"If you are able to edit your kernel command line:","text":"<ol> <li> <p>Edit the kernel command line of this boot and add the <code>nomodeset</code> kernel parameter. This will enable you to access your Linux system in safe graphics.</p> </li> <li> <p>Follow the instructions above.</p> </li> <li> <p>You can now remove the <code>nomodeset</code> parameter from your kernel command line.</p> </li> </ol>"},{"location":"guides/hybrid-graphics/#if-you-are-unable-to-edit-your-kernel-command-line","title":"If you are unable to edit your kernel command line:","text":"<ol> <li> <p>Boot into macOS</p> <ol> <li> <p>Mount your Linux EFI partition over there. In most cases it should be <code>disk0s1</code> and can be mounted by running <code>sudo diskutil mount disk0s1</code> in the terminal. If you are using a separate EFI partition, the you can run <code>diskutil list</code> and find your partition in the output, and mount it accordingly.</p> </li> <li> <p>Install apple-os-set loader from here using macOS, and put it in your Linux EFI partition.</p> </li> </ol> </li> <li> <p>Restart into macOS Recovery by immediately pressing and holding Command+R on startup.</p> <ol> <li>Open the terminal there and run <code>nvram fa4ce28d-b62f-4c99-9cc3-6815686e30f9:gpu-power-prefs=%01%00%00%00</code>.</li> </ol> </li> <li> <p>Restart into Linux. You should now be able to access your Linux installation.</p> </li> <li> <p>Follow the instructions above.</p> </li> <li> <p>Remove apple-os-set loader.</p> </li> </ol>"},{"location":"guides/hybrid-graphics/#use-on-windows","title":"Use on Windows","text":"<p>The iGPU only works on Windows if there's no driver for it installed. Windows likes installing drivers.</p> <p>If you want to switch GPU for Windows, use 0xbb's gpu-switch script.</p>"},{"location":"guides/hybrid-graphics/#vfio-gpu-passthrough","title":"VFIO GPU passthrough","text":"<p>Refer to this gist for quirks required to pass through the dGPU to a Windows Virtual Machine, while having Linux use the iGPU.</p>"},{"location":"guides/kernel/","title":"Kernel","text":"<p>This page explains how to compile a Linux kernel with patches for T2 hardware support and with apple-bce + apple-ibridge included. If you have issues, make sure you are running the commands here with <code>bash</code>.</p> <p>If your distro is not one of the distros with documentation on this Wiki, you may not need to compile a kernel yourself to get support for T2 hardware. Debian based systems can use the same kernel as described in the Ubuntu section, Arch based systems can use the same kernel as described in the Arch section, etc.</p>"},{"location":"guides/kernel/#requirements","title":"Requirements","text":"<ul> <li> <p>You will need some packages to build the kernel:</p> <ul> <li>Arch based systems: <code>sudo pacman --needed -S bc kmod libelf pahole cpio perl tar xz git</code></li> <li>Debian based systems: <code>sudo apt install build-essential libncurses-dev libssl-dev flex bison libelf-dev bc dwarves openssl</code></li> <li>For other distros you will need the equivalent of these, but if you miss something you'll most likely get an error saying what's missing, and you can then install it and re-run <code>make</code> to continue where you left off.</li> </ul> </li> <li> <p>You will need about 20GB of disk space to compile the kernel. If you have a large amount of ram, you could use tmpfs to store build files in ram.</p> </li> </ul>"},{"location":"guides/kernel/#building-kernel","title":"Building kernel","text":""},{"location":"guides/kernel/#getting-kernel-source-and-applying-patches","title":"Getting kernel source and applying patches","text":"<p>Hint</p> <p>The kernel source will be downloaded with HTTPS, but if you would like to be extra careful and verify the kernel source code with <code>gpg</code>, please refer to this page.</p> <pre><code>mkdir build &amp;&amp; cd build\ngit clone --depth=1 https://github.com/t2linux/linux-t2-patches patches\n\npkgver=$(curl -sL https://github.com/t2linux/T2-Ubuntu-Kernel/releases/latest/ | grep \"&lt;title&gt;Release\" | awk -F \" \" '{print $2}' | cut -d \"v\" -f 2 | cut -d \"-\" -f 1)\n_srcname=linux-${pkgver}\nwget https://www.kernel.org/pub/linux/kernel/v${pkgver//.*}.x/linux-${pkgver}.tar.xz\ntar xf $_srcname.tar.xz\ncd $_srcname\n\nfor patch in ../patches/*.patch; do\n    patch -Np1 &lt; $patch\ndone\n</code></pre>"},{"location":"guides/kernel/#setting-kernel-configuration","title":"Setting kernel configuration","text":"<p>Using config from lower kernel versions</p> <p>We will use the config of the kernel that is currently running. If your running kernel is an older longterm/stable kernel, it's possible that some of the default choices for new options added to the kernel might not be what you want. You can replace <code>make olddefconfig</code> in the code block below with <code>make oldconfig</code> if you want to manually set new options. You can always later use <code>make menuconfig</code> to change kernel config options if you have issues.</p> <pre><code>zcat /proc/config.gz &gt; .config\nmake olddefconfig\nscripts/config --module CONFIG_BT_HCIBCM4377\nscripts/config --module CONFIG_HID_APPLE_IBRIDGE\nscripts/config --module CONFIG_HID_APPLE_TOUCHBAR\nscripts/config --module CONFIG_HID_APPLE_MAGIC_BACKLIGHT\nscripts/config --module CONFIG_APPLE_BCE\n</code></pre>"},{"location":"guides/kernel/#building","title":"Building","text":"<p>This may take 2-3 hours to build depending on your CPU and the kernel config.</p> <p>Incremental builds</p> <p>If you <code>control-c</code> to stop the build process, you may continue where you left off by running <code>make</code> again. If you build the kernel, and realise you want to make more changes to the code or config, re-running <code>make</code> will only rebuild bits that you changed.</p> <pre><code>make -j$(nproc)\n</code></pre>"},{"location":"guides/kernel/#installing","title":"Installing","text":"<pre><code>export MAKEFLAGS=-j$(nproc)\n\nsudo make modules_install\nsudo make install\n</code></pre> <p>If <code>sudo make install</code> said \"Cannot find LILO.\", that's fine.</p> <p>Look at the output from <code>sudo make install</code>. If it mentioned creating an initramfs or an initrd, a script provided by your distro has done the next step for you. The same goes for if it mentions updating grub or systemd-boot or bootloader config. This distro script would be at <code>/sbin/updatekernel</code>.</p>"},{"location":"guides/kernel/#initramfsinitrd","title":"Initramfs/Initrd","text":"<p>Next we must create an initramfs/initrd (Initial RAM Filesystem / Initial RAM Disk). As mentioned in the previous step, this may have been automatically done for you.</p> <p>For most arch based systems:</p> <pre><code>sudo mkinitcpio -k /boot/vmlinuz -c /etc/mkinitcpio.conf -g /boot/initramfs.img\n</code></pre> <p>For other distros, refer to your distro's documentation if this wasn't done by <code>make install</code> earlier.</p>"},{"location":"guides/kernel/#adding-new-kernel-to-bootloader-config","title":"Adding new kernel to bootloader config","text":"<p>Again, <code>sudo make install</code> may have done this for you.</p>"},{"location":"guides/kernel/#grub","title":"Grub","text":"<ol> <li>Edit <code>/etc/default/grub</code> and set <code>GRUB_TIMEOUT=3</code> (You can pick a different amount of seconds), and <code>GRUB_TIMEOUT_STYLE=menu</code></li> <li><code>sudo grub-mkconfig -o /boot/grub/grub.cfg</code></li> </ol>"},{"location":"guides/kernel/#systemd-boot","title":"Systemd-boot","text":"<ol> <li>Make a copy of any <code>.conf</code> file in <code>/boot/loader/entries/</code> and name it something like <code>linux.conf</code></li> <li> <p>Edit the file you just created and change the <code>linux</code> and <code>initrd</code> lines like this, but leave any <code>initrd</code> lines with <code>ucode</code>. Also change the title to something different.</p> <pre><code>title   Linux Custom\nlinux   /vmlinuz\ninitrd  /initramfs.img\n</code></pre> </li> <li> <p>Edit <code>/boot/loader/loader.conf</code> and make sure the timeout is 1 or higher, and if you want you can change the default to the name of the file you created in step 1.</p> </li> </ol>"},{"location":"guides/kernel/#rebooting","title":"Rebooting","text":"<p>When you reboot, you should either now have the new kernel as the default, or be able to select it with up and down arrow keys and enter. You can check <code>uname -r</code> to see the kernel version that you are currently running.</p> <p>Hint</p> <p>You also can use <code>kexec</code> to start the new kernel without a full reboot which is quicker if you are rebuilding the kernel repeatedly. <code>sudo kexec -l /boot/vmlinuz --initrd=/boot/initramfs.img --reuse-cmdline &amp;&amp; systemctl kexec</code></p>"},{"location":"guides/postinstall/","title":"Introduction","text":"<p>This page explains how to perform a basic set up after installing Linux on a T2 Mac.</p>"},{"location":"guides/postinstall/#do-you-need-to-do-this","title":"Do you need to do this?","text":"<p>This guide is mainly relevent in the following cases :</p> <ol> <li>If you have installed Linux using an official ISO, instead of a T2 ISO.</li> <li>The Make modules load on early boot section is relevant for those who wish to encrypt their disk drives using LUKS or some other similar software.</li> <li>If some functionality related to T2 Macs is broken, then you can consider following this guide.</li> </ol> <p>In rest cases, you probably won't need to follow this guide.</p>"},{"location":"guides/postinstall/#installing-a-kernel-for-t2-support","title":"Installing a kernel for T2 support","text":"<p>Installing a kernel with support for T2 Macs is required in order to get the Keyboard, Trackpad, Touch Bar, Audio, Fan and Wi-Fi working.</p> <p>Many distro maintainers provide compiled kernels which can be installed on your Linux installation. Following are the links to the repos providing such kernels:</p> Linux Distribution Kernel with T2 support Arch based distros https://github.com/NoaHimesaka1873/linux-t2-arch Arch based distros (Xanmod kernels) https://github.com/NoaHimesaka1873/linux-xanmod-edge-t2 Fedora https://github.com/mikeeq/mbp-fedora-kernel Fedora https://github.com/t2linux/fedora-kernel Gentoo https://github.com/t2linux/T2-Gentoo-Kernel Manjaro https://github.com/NoaHimesaka1873/manjaro-kernel-t2 NixOS https://github.com/NixOS/nixos-hardware Ubuntu based distros https://github.com/t2linux/T2-Ubuntu-Kernel Debian based distros https://github.com/andersfugmann/T2-Debian-Kernel <p>If compiled kernels for your distro are not available, then you shall have to compile a kernel on your own. You can follow the Kernel guide for help.</p>"},{"location":"guides/postinstall/#add-necessary-kernel-paramaters","title":"Add necessary kernel paramaters","text":"<p>Using your bootloader, add the <code>intel_iommu=on iommu=pt pcie_ports=compat</code> kernel parameters. For example in GRUB:</p> <ol> <li>Edit <code>/etc/default/grub</code>.</li> <li>On the line with <code>GRUB_CMDLINE_LINUX=\"quiet splash\"</code>, add the following kernel parameters: <code>intel_iommu=on iommu=pt pcie_ports=compat</code>.</li> <li>Run <code>sudo grub-mkconfig -o /boot/grub/grub.cfg</code> if you are on a non-debian based distro. If using Debian or Ubuntu based distro, run <code>sudo update-grub</code>.</li> </ol>"},{"location":"guides/postinstall/#make-modules-load-on-boot","title":"Make modules load on boot","text":"<p>Simply run the following:</p> <pre><code>echo apple-bce | sudo tee /etc/modules-load.d/t2.conf\n</code></pre>"},{"location":"guides/postinstall/#make-modules-load-on-early-boot","title":"Make modules load on early boot","text":"<p>Having the <code>apple-bce</code> module loaded early allows the use of the keyboard for decrypting encrypted volumes (LUKS). It also is useful when boot doesn't work, and the keyboard is required for debugging. To do this, one must ensure the <code>apple-bce</code> module as well as its dependent modules are included in the initial ram disk. You can get the list of dependent modules by running <code>modinfo -F depends apple-bce</code> The steps to be followed vary depending upon the initramfs module loading mechanism used by your distro. Some examples are given as follows:</p> <ul> <li> <p>On systems with <code>initramfs-tools</code> (all debian-based distros):</p> <ol> <li> <p>Run <code>sudo su</code> to open a shell as root.</p> </li> <li> <p>Run the following over there:</p> <pre><code>cat &lt;&lt;EOF &gt;&gt; /etc/initramfs-tools/modules\n# Required modules for getting the built-in apple keyboard to work:\nsnd\nsnd_pcm\napple-bce\nEOF\nupdate-initramfs -u\n</code></pre> </li> </ol> </li> <li> <p>On systems with mkinitcpio (Commonly used on Arch):</p> <ol> <li> <p>Edit the <code>/etc/mkinitcpio.conf</code> file.</p> </li> <li> <p>Ensure that the file has the following:</p> <pre><code>MODULES=\"apple-bce\"\n</code></pre> </li> <li> <p>Run <code>sudo mkinitcpio -P</code>.</p> </li> </ol> </li> <li> <p>On systems with other initramfs/initrd generation systems:</p> <p>In this case, refer to the documentation of the same and ensure the kernel module <code>apple-bce</code> is loaded early.</p> </li> </ul>"},{"location":"guides/postinstall/#setting-up-the-touch-bar","title":"Setting up the Touch Bar","text":"<p>Setting up the Touch Bar is different for Ubuntu and Debian based distros.</p> <p>If you are using an Ubuntu or Debian based distro:</p> <ol> <li>Add the apt repo for T2 Macs from here.</li> <li>Install <code>tiny-dfr</code> by running <code>sudo apt install tiny-dfr</code>.</li> <li>Restart your Mac.</li> <li>After restarting, you can run <code>sudo touchbar</code> to get a list of options that you can configure. Simply follow the on-screen instructions.</li> </ol> <p>For other distros:</p> <ul> <li> <p>The Touch Bar can be set up by running this script in Linux using <code>bash /path/to/script</code>. Make sure your Linux kernel and macOS is updated before running this script.</p> </li> <li> <p>After running this script, if you wish to change the default mode of the Touch Bar, run <code>sudo touchbar</code> and choose the mode you wish.</p> </li> <li> <p>If you want to try something new and you're using Arch Linux, EndeavourOS, or Manjaro, you could install <code>touchbard</code> package and use that instead. For more information, visit touchbard repository.</p> </li> </ul>"},{"location":"guides/postinstall/#wi-fi-and-bluetooth","title":"Wi-Fi and Bluetooth","text":"<p>The drivers for Wi-Fi and Bluetooth are included in a kernel with T2 support. But, we also need firmware to get them working from macOS.</p> <p>Instructions for the same are given in the Wi-Fi and Bluetooth guide.</p>"},{"location":"guides/postinstall/#network-manager-recurrent-notifications","title":"Network Manager recurrent notifications","text":"<p>Some users have experienced recurrent notifications due the internal usb ethernet interface connected to the T2 chip. To avoid those notifications we can blacklist <code>cdc_ncm</code> and <code>cdc_mbim</code> modules with the following command:</p> <pre><code>sudo sh -c 'echo \"# Disable for now T2 chip internal usb ethernet\nblacklist cdc_ncm\nblacklist cdc_mbim\" &gt;&gt; /etc/modprobe.d/blacklist.conf'\n</code></pre> <p>Please note that this internal ethernet interface is required for various services including touchid that there currently is no Linux support for. In the future, if any of these services are supported, you'll need to undo this.</p>"},{"location":"guides/preinstall/","title":"Pre install steps","text":"<p>These steps are common to most distros. Please refer to both this page and this wiki's install page for your distro.</p>"},{"location":"guides/preinstall/#partition-with-disk-utility","title":"Partition with Disk Utility","text":"<p>In macOS Disk Utility you need to create your Linux partition:</p> <ol> <li>Open Disk Utility</li> <li>Choose the volume you want to partition for Linux</li> <li>Press in the top-right \"Partition\"</li> <li>Under the blue pie chart press \"+\" button</li> <li>When prompted be sure to select \"Add Partition\" and NOT \"Volume\", you want a partition.</li> <li>Name: choose a name for the partition, e.g. Linux</li> <li>Format: choose whatever format there is - APFS or another - it doesn't really matter (during the Linux installation you must erase your created partition anyway)</li> <li>Size: pick the desired amount of space for Linux, because you will not be able to change it.</li> <li>If you want separate partitions for <code>/home</code>, <code>/boot</code> etc., create them as well (if you are a beginner and you don't understand this point, you may just skip it).</li> </ol> <p>Triple booting with Linux and Windows</p> <p>Refer to this guide to make sure you will be able to boot both Windows and Linux.</p>"},{"location":"guides/preinstall/#create-linux-installation-usb","title":"Create Linux installation USB","text":""},{"location":"guides/preinstall/#selecting-an-iso","title":"Selecting an ISO","text":"<p>Listed below are the currently available installer ISOs for download:</p> Linux Distribution Download ISO with T2 support Arch Linux https://github.com/t2linux/archiso-t2/releases/latest blendOS https://docs.blendos.co/guides/installation-guide-for-macs-with-t2-chip EndeavourOS https://github.com/t2linux/EndeavourOS-ISO-t2/releases/latest Fedora https://github.com/mikeeq/mbp-fedora Fedora https://github.com/t2linux/fedora-iso/releases/latest Gentoo Please refer to this page Manjaro https://github.com/NoaHimesaka1873/manjaroiso-t2/releases/latest NixOS https://github.com/t2linux/nixos-t2-iso Ubuntu &amp; Kubuntu https://github.com/t2linux/T2-Ubuntu/releases/latest"},{"location":"guides/preinstall/#other-distributions","title":"Other distributions","text":"<p>If you are a beginner we highly recommend to choose one of the distros above.</p> <p>In case you wish to proceed manually, you can download the official ISO from the distro website, but you will have to use an external USB keyboard and mouse for the install process. Additionally, you may require a wired internet connection with a USB adapter. Note that if you later have issues with installing the bootloader (e.g.: GRUB), try booting the ISO with the <code>efi=noruntime</code> kernel parameter.</p> <p>Please, refer to this guide: Basic setup.</p> <p>You can also find detailed info for unsupported debian-based distros here.</p>"},{"location":"guides/preinstall/#copying-the-iso-to-the-usb","title":"Copying the ISO to the USB","text":"<p>User-friendly applications for copying the Linux install image to your USB include:</p> <ul> <li>USBImager</li> <li>balenaEtcher (does collect analytics data)</li> </ul> <p>Or you can use <code>dd</code> in macOS Terminal:</p> <ol> <li>Insert your USB drive.</li> <li>Open macOS Terminal.</li> <li>Run <code>diskutil list</code> to list all the drives.</li> <li>Look up for your USB thumb which appears as an external, physical drive labelled <code>/dev/diskX</code> where <code>X</code> is a single number (e.g. /dev/disk2).</li> <li>Run <code>sudo diskutil unmountDisk /dev/diskX</code> to unmount the disk.</li> <li>Run <code>sudo dd if=path/to/linux.iso of=/dev/rdiskX bs=1m</code> to start writing. To fetch the iso path easily you can just drag and drop the .iso into the Terminal.</li> <li>Now you may press <code>control-T</code> to make it show how many KBs it has written so far.</li> </ol> <p>While the installation image is being written to the USB, you can skip to Copy Wi-Fi firmware; but don't follow the steps after it, wait until the ISO has been written to disk.</p>"},{"location":"guides/preinstall/#copy-wi-fi-firmware","title":"Copy Wi-Fi firmware","text":"<p>Linux's Wi-Fi driver uses the same Wi-Fi firmware files as macOS, so we copy these files from macOS to the EFI partition where Linux can access and eventually install them.</p> <p>Follow here the first part in macOS and come back to this page.</p> <p>The second part must be followed on Linux after you have completed the installation.</p>"},{"location":"guides/preinstall/#disable-secure-boot","title":"Disable Secure Boot","text":"<p>Now that you have completed the first part of the Wi-Fi firmware in macOS, you can proceed with the disabling of the secure boot. Apple's Secure Boot implementation does not allow booting anything other than macOS or Windows when it is enabled (not even shim signed GRUB). We need to disable it:</p> <ol> <li>Turn off your Mac</li> <li>Turn it on and press and hold <code>Command-R</code> until the black screen flashes</li> <li>Your Mac will boot in the macOS Recovery</li> <li>Select your user and enter your password</li> <li>Now, from the menu bar choose Utilities &gt; Startup Security Utility</li> <li>Enter again the password</li> <li> <p>Once in Startup Security Utility:</p> </li> <li> <p>set Secure Boot to No Security</p> </li> <li>set Allow Boot  Media to Allow booting from external or removable media</li> </ol> <p>Now you are able to boot from a Linux install ISO.</p> <p>Keeping your Mac secure while Secure Boot is off</p> <p>If you are worried about the reduced security, in Startup Security Utility you can select \"Turn On Firmware Password\" to require entering a password to boot anything other than the default OS. Additionally, after installing Linux on the internal SSD, you will have the option to reselect \"Disallow booting from external or removable media\" in the Startup Security Utility.</p>"},{"location":"guides/preinstall/#booting-your-linux-install-usb","title":"Booting your Linux install USB","text":"<ol> <li>Ensure the Linux Installation USB you created is plugged into your Mac.</li> <li>Reboot while holding down the option (\u2325) key, this will put you in macOS Startup Manager.</li> <li>Select the orange EFI option with arrow keys and press return/enter on it. If there are two, try the one to the very right first (the last one).</li> <li>The installation may start right away or you may be put into a Bootloader Menu where it may select a default option e.g. \"Try or Install Ubuntu\", but you can use arrow keys to select a different option. If you are unsure, check if there is any additional advice on your distro's installation page on this wiki.</li> </ol> <p>A software update is required to use this startup disk</p> <p>If you see this message when trying to boot Linux, Apple may be enforcing Secure Boot. Make sure you have disabled Secure Boot. If there were two orange \"EFI Boot\" entries in Startup Manager, try selecting the other one. This may occur when booting Linux from a partition formatted as APFS or \"macOS Extended\" (also known as \"hfs+\"), even when Secure Boot is completely disabled.</p>"},{"location":"guides/preinstall/#follow-distro-specific-steps","title":"Follow distro specific steps","text":"<p>Automatic Partitioning</p> <p>The installers of many distros provide options like \"Automatic Partitioning\" when installing Linux. You always have to select the option that allows \"Manual Partitioning\". Do not select \"Automatic Partitioning\" as it shall remove macOS as well. During manual partitioning make sure that you mount <code>/dev/nvme0n1p1</code> or your separate EFI partition (whatever applies to your case) at <code>/boot/efi</code> and the partition you created for Linux at <code>/</code>. If you want separate partitions for <code>/home</code>, <code>/boot</code> etc., make sure you have created them before as well and mount them accordingly during manual partitioning.</p> <p>This wiki provides a set of guides for different distributions. If the distribution you want to use is present there, it's recommended to follow it instead of the official documentation by distribution vendor, as it considers T2 support.</p>"},{"location":"guides/refind/","title":"Introduction","text":"<p>This guide shall help you install the rEFInd Boot Manager in your T2 Mac in the safest possible way. Though there are various options to get rEFInd on your Mac, it is recommended to follow the instructions given below unless you know what you are doing.</p>"},{"location":"guides/refind/#installation","title":"Installation","text":"<p>All steps given here have to be performed on macOS. You will also need to have secure boot disabled.</p> <ol> <li> <p>With the help of disk utility, create a 100-200MB <code>MS-DOS FAT</code> partition and label it as <code>REFIND</code>.</p> </li> <li> <p>Get a binary zip file of rEFInd from here.</p> </li> <li> <p>The binary zip file of rEFInd shall be available in the downloads folder by the name of <code>refind-bin-&lt;VERSION&gt;.zip</code>, where <code>&lt;VERSION&gt;</code> represents the version of rEFInd you have downloaded, e.g.: if you have downloaded <code>0.13.2</code> version, it will be available as <code>refind-bin-0.13.2.zip</code>.</p> </li> <li> <p>Now run the following in the terminal:</p> <pre><code>IDENTIFIER=$(diskutil info REFIND | grep \"Device Identifier\" | cut -d: -f2 | xargs)\ncd ~/Downloads\nunzip refind-bin*\nrm refind-bin*.zip\ncd refind-bin*\nxattr -rd com.apple.quarantine .\nsed -i '' \"s/sed -i 's/sed -i '' 's/g\" refind-install\ndiskutil unmount $IDENTIFIER\nsudo ./refind-install --usedefault /dev/$IDENTIFIER\ndiskutil unmount $IDENTIFIER\ndiskutil mount $IDENTIFIER\nsudo rmdir /tmp/refind_install\nrm -r ~/Downloads/refind-bin*\n</code></pre> </li> <li> <p>Now run:</p> <pre><code>bless --folder /Volumes/REFIND/EFI/BOOT --label rEFInd\n</code></pre> <p>This will change the label in the Mac Startup Manager for rEFInd from <code>EFI Boot</code> to <code>rEFInd</code>.</p> </li> </ol>"},{"location":"guides/refind/#configuration","title":"Configuration","text":"<p>Though rEFInd has many configuration options, some basic configuration is required for a smoother experience on T2 Macs.</p>"},{"location":"guides/refind/#removing-bios-entries","title":"Removing BIOS entries","text":"<p>Macs with T2 chip cannot BIOS boot. So it is advised to remove the BIOS entries. For that, open finder, and then open the <code>REFIND</code> volume. Add the line given below at the end of <code>EFI/BOOT/refind.conf</code> file by editing it with a text editor.</p> <pre><code>scanfor internal,external,optical,manual\n</code></pre> <p>In case you face the error saying The document \u201crefind.conf\u201d could not be saved., copy the <code>refind.conf</code> file to any place in your home directory (Downloads folder for example) and do the editing over there. After editing replace the <code>refind.conf</code> file in the <code>REFIND</code> volume with the newly edited file.</p>"},{"location":"guides/refind/#hiding-text-on-booting-an-os-using-refind-optional","title":"Hiding text on booting an OS using rEFInd (Optional)","text":"<p>In case you boot an OS other than macOS using rEFInd, it shows some debug text while booting it. In order to get a smooth boot experience similar to the Mac Startup Manager, add the following line to <code>EFI/BOOT/refind.conf</code>, just as you did to remove BIOS entries.</p> <pre><code>use_graphics_for osx,linux,windows,grub\n</code></pre>"},{"location":"guides/refind/#preventing-use-of-nvram-likely-to-have-been-enabled-already","title":"Preventing use of NVRAM (Likely to have been enabled already)","text":"<p>Preventing use of NVRAM is must as T2 doesn\u2019t like someone to touch the NVRAM. In latest editions of rEFInd, preventing use of NVRAM is enabled by default. You may confirm this by checking presence of <code>use_nvram false</code> line somewhere in the middle of the <code>refind.conf</code> file (the one mentioned in above instructions). Make sure it is not commented (doesn\u2019t have a <code>#</code> before the line). If it is then remove the <code>#</code>.</p> <p>In case the line is missing, add it at the end of <code>refind.conf</code> file.</p> <p>In case the line <code>use_nvram true</code> is present instead, change <code>true</code> to <code>false</code>.</p>"},{"location":"guides/refind/#making-refind-default-at-startup","title":"Making rEFInd default at startup","text":"<p>After correctly installing and configuring rEFInd, we need to make it boot by default on every startup. In order to do so, restart your Mac and press and hold down the Option (Alt) key. When the startup manager gets displayed, release the Option key. Now press and hold the Control key and without releasing the Control key, boot into the rEFInd startup disk. Now on every startup, rEFInd will get displayed by default.</p> <p>Warning</p> <p>This step has to be performed every time you update macOS to a newer version, as this makes the macOS startup disk as the default startup disk.</p>"},{"location":"guides/refind/#fixing-blank-screen-on-booting-macos-using-refind","title":"Fixing blank screen on booting macOS using rEFInd","text":"<p>Sometimes, while booting into macOS using rEFInd, users get stuck at a blank screen. This bug is observed only if you have performed a force/unsafe shutdown by pressing and holding the power button in the previous boot. Some users have also faced it in the first macOS boot using rEFInd on new rEFInd installations. In order to fix it, turn off your Mac and restart while holding down the Option (Alt) key. Release the Option key when the Mac Startup Manager gets displayed. Boot into macOS using the Mac Startup Manager. This shall fix the bug for subsequent boots.</p>"},{"location":"guides/refind/#using-refind-as-a-replacement-for-grub-systemd-boot-etc","title":"Using rEFInd as a replacement for GRUB, systemd-boot etc.","text":"<p>By default, rEFInd boots Linux indirectly by booting GRUB, systemd-boot etc. But we can also boot linux directly by using rEFInd. This can be useful in situations where other bootloaders are causing issues. In order to do so, follow the following steps:</p> <ol> <li> <p>Boot into Linux using the bootloader currently in use. If the bootloader is facing issues, you may also chroot into the installation using your distro's ISO and run the commands within the chroot.</p> </li> <li> <p>Get a binary zip file of rEFInd from here.</p> </li> <li> <p>The binary zip file of rEFInd shall be available in the downloads folder by the name of <code>refind-bin-&lt;VERSION&gt;.zip</code>, where <code>&lt;VERSION&gt;</code> represents the version of rEFInd you have downloaded, e.g.: If you have downloaded <code>0.13.2</code> version, it will be available as <code>refind-bin-0.13.2.zip</code>.</p> </li> <li> <p>Move the zip into the <code>/boot</code> folder. If you are chrooting, the move the zip into the <code>/boot</code> folder of the chroot.</p> </li> <li> <p>Now run:</p> <pre><code>cd /boot\nsudo unzip refind-bin*\nsudo rm refind-bin*.zip\ncd refind-bin*\nsudo ./mkrlconf\nsudo sed -i 's/\"Boot to single-user mode\"/#\"Boot to single-user mode\"/g' /boot/refind_linux.conf\nsudo sed -i 's/\"Boot with minimal options\"/#\"Boot with minimal options\"/g' /boot/refind_linux.conf\nsudo rm -r /boot/refind-bin*\n</code></pre> </li> <li> <p>A file named <code>refind_linux.conf</code> shall be made in your /boot folder of your installation. A sample of this is given below.</p> <pre><code>\"Boot with standard options\"  \"ro root=UUID=631c326a-fb48-46ba-b4aa-6dd2033fbb5e\"\n#\"Boot to single-user mode\"    \"ro root=UUID=631c326a-fb48-46ba-b4aa-6dd2033fbb5e single\"\n#\"Boot with minimal options\"   \"ro root=UUID=631c326a-fb48-46ba-b4aa-6dd2033fbb5e\"\n</code></pre> <p>Chroot</p> <p>If you have run the in step 5 commands within a chroot, the <code>ro root=UUID=631c326a-fb48-46ba-b4aa-6dd2033fbb5e</code> shall likely to be missing. In this case, manually edit the <code>refind_linux.conf</code> file in the <code>/boot</code> folder of your chroot to look like the sample and replace the UUID (<code>631c326a-fb48-46ba-b4aa-6dd2033fbb5e</code> in the sample) with the one of the partition in which your Linux is installed. You can get the UUID from <code>/etc/fstab</code> file of your chroot or using a disk utility software.</p> </li> <li> <p>On the line with <code>\"Boot with standard options\"</code>, add the <code>intel_iommu=on iommu=pt pcie_ports=compat efi=noruntime quiet splash</code> parameters. It is possible that some parameters are already added. In such case, add only the missing parameters. If you don't want a silent boot, you may omit out the <code>quiet splash</code> parameter. Finally, the <code>refind_linux.conf</code> file should look something like this.</p> <pre><code>\"Boot with standard options\"  \"ro root=UUID=631c326a-fb48-46ba-b4aa-6dd2033fbb5e intel_iommu=on iommu=pt pcie_ports=compat efi=noruntime quiet splash\"\n#\"Boot to single-user mode\"    \"ro root=UUID=631c326a-fb48-46ba-b4aa-6dd2033fbb5e single\"\n#\"Boot with minimal options\"   \"ro root=UUID=631c326a-fb48-46ba-b4aa-6dd2033fbb5e\"\n</code></pre> </li> <li> <p>Now, when you shall be in rEFInd, it should show an entry with the path of the image of your kernel and shall most probably have the icon of the Linux Penguin. That entry shall be the one which shall boot Linux directly using rEFInd.</p> </li> <li> <p>If you want to use your distro's icon instead of Linux Penguin one, you may label the volume containing your kernel with the name of your distro. Following are some examples of commands for various filesystems, taking the distro as Ubuntu and partition in which kernel is in as <code>/dev/nvme0n1p3</code>.</p> <ol> <li> <p>ext2, ext3 or ext4:</p> <pre><code>sudo tune2fs -L \"Ubuntu\" /dev/nvme0n1p3\n</code></pre> </li> <li> <p>btrfs:</p> <pre><code>MOUNTPOINT=$(findmnt -n -o TARGET /dev/nvme0n1p3)\nsudo btrfs filesystem label $MOUNTPOINT \"Ubuntu\"\n</code></pre> </li> </ol> <p>More ways to set custom icons are described here.</p> </li> </ol>"},{"location":"guides/refind/#uninstalling-refind","title":"Uninstalling rEFInd","text":"<p>In case you wish to uninstall rEFInd, boot into macOS and follow the steps below:</p> <ol> <li>Open the Disk Utility</li> <li>Select the partition on which macOS is installed (it generally has the label <code>Macintosh HD</code> until you have renamed it manually).</li> <li>Click on Partition.</li> <li>Select the <code>REFIND</code> partition and click <code>-</code> to remove it. Your macOS partition should expand to fill the space that rEFInd was in.</li> <li>Click on Apply. Disk Utility will remove the <code>REFIND</code> partition and expand your macOS partition. This may take a while, but do not interrupt this process.</li> <li>Change the default startup disk to the OS you wish to be boot by default.</li> </ol> <p>If the OS you wish is macOS or Windows, follow Apple's documentation where you have to follow the Change your startup disk for every startup section.</p> <p>If the OS you wish is Linux, follow the Startup Manager Guide.</p>"},{"location":"guides/refind/#references-and-external-links","title":"References and External links","text":"<p>Reference - This guide has been inspired from here.</p> <p>rEFInd - Official website of rEFInd.</p> <p>Theming rEFInd - Useful guide to set custom themes for rEFInd.</p>"},{"location":"guides/startup-manager/","title":"Introduction","text":"<p>This guide shall help you perform 2 tasks. Firstly you shall be able to set the correct label for your Linux startup disk on Mac startup manager and replace the <code>EFI Boot</code> label, and give it an icon. Secondly you shall be able to make Linux startup disk as the default startup disk in case you wish to do so.</p> <p>The steps to perform the above tasks vary as per the way you have installed Linux, and thus check out the guide under the heading that applies to your case.</p>"},{"location":"guides/startup-manager/#setting-labels","title":"Setting labels","text":""},{"location":"guides/startup-manager/#setting-label-in-case-you-are-using-the-efi-partition-available-by-default-in-mac-and-are-on-a-dual-boot-system","title":"Setting label in case you are using the EFI partition available by default in Mac and are on a dual boot system","text":"<p>In this case, boot into macOS, open a terminal window and run:</p> <pre><code>sudo diskutil mount disk0s1\nbless --folder /Volumes/EFI/EFI/BOOT --label \"&lt;YOUR DISTRO'S NAME&gt;\"\n</code></pre> <p>Replace <code>&lt;YOUR DISTRO'S NAME&gt;</code> with your distro's name. E.g.: If you are using Ubuntu, run:</p> <pre><code>sudo diskutil mount disk0s1\nbless --folder /Volumes/EFI/EFI/BOOT --label \"Ubuntu\"\n</code></pre>"},{"location":"guides/startup-manager/#setting-label-in-case-you-are-using-the-same-efi-partition-for-windows-and-linux","title":"Setting label in case you are using the same EFI partition for Windows and Linux","text":"<p>More details about this can be found in the triple boot guide.</p> <p>In this case the Windows startup disk is used to boot both Windows and Linux. Thus, it is not recommended to set special labels for Linux as it may cause errors with the Windows startup disk.</p>"},{"location":"guides/startup-manager/#setting-label-in-case-you-are-using-a-seperate-efi-partition-for-linux","title":"Setting label in case you are using a seperate EFI partition for Linux","text":"<p>More details about this can be found in the triple boot guide.</p> <p>In this case, boot into macOS, open a terminal window and run:</p> <pre><code>IDENTIFIER=$(diskutil info &lt;NAME OF SEPERATE EFI PARTITION&gt; | grep \"Device Identifier\" | cut -d: -f2 | xargs)\nsudo diskutil mount $IDENTIFIER\nbless --folder /Volumes/&lt;NAME OF SEPERATE EFI PARTITION&gt;/EFI/BOOT --label \"&lt;YOUR DISTRO'S NAME&gt;\"\n</code></pre> <p>Replace <code>&lt;NAME OF SEPERATE EFI PARTITION&gt;</code> with the label you set using in the above triple boot guide and <code>&lt;YOUR DISTRO'S NAME&gt;</code> with your distro's name. E.g.: If you are using Ubuntu and you set the label to <code>EFI2</code>, run:</p> <pre><code>IDENTIFIER=$(diskutil info EFI2 | grep \"Device Identifier\" | cut -d: -f2 | xargs)\nsudo diskutil mount $IDENTIFIER\nbless --folder /Volumes/EFI2/EFI/BOOT --label \"Ubuntu\"\n</code></pre>"},{"location":"guides/startup-manager/#setting-the-boot-option-icons-in-macos-startup-manager","title":"Setting the boot option icons in macOS Startup Manager","text":"<p>In case you are using the same EFI partition for Windows and Linux, then your Windows startup disk already has an icon. Thus you needn't set any boot icon.</p> <p>In other cases, put an <code>icns</code> image file with your desired icon in the top directory of the disk that the bootloader of the menu entry is on, and call it <code>.VolumeIcon.icns</code>. It will now appear as that disk's boot option's icon.</p>"},{"location":"guides/startup-manager/#setting-linux-startup-disk-as-the-default-startup-disk","title":"Setting Linux startup disk as the default startup disk","text":"<p>Warning</p> <p>In case you upgrade macOS to a newer version, the default startup disk gets changed to the macOS startup disk. Thus you will have to follow the instructions to make the Linux startup disk as default every time after you upgrade macOS.</p>"},{"location":"guides/startup-manager/#case-of-common-efi-partition-for-windows-and-linux","title":"Case of common EFI partition for Windows and Linux","text":"<p>In this case you will have to set the Windows startup disk as the default startup disk. It is recommended to follow Apple's documentation where you have to follow the Change your startup disk for every startup section.</p> <p>If this method is not working for you, then follow the instructions given in Case of seperate EFI partition for Linux as well as case of using the EFI partition available by default in Mac and are on a dual boot system section, where you have to consider the Windows startup disk as the Linux startup disk.</p>"},{"location":"guides/startup-manager/#case-of-seperate-efi-partition-for-linux-as-well-as-case-of-using-the-efi-partition-available-by-default-in-mac-and-are-on-a-dual-boot-system","title":"Case of seperate EFI partition for Linux as well as case of using the EFI partition available by default in Mac and are on a dual boot system","text":"<p>In these cases, start your Mac and press and hold down the Option key. When the startup manager gets displayed, release the option key. Now press and hold the Control key and without releasing the Control key, boot into the Linux startup disk as you usually do. This will make it the default startup disk.</p>"},{"location":"guides/uninstall/","title":"Introduction","text":"<p>This page explains how to remove Linux from your Mac. It shouldn't matter what distro you are using.</p>"},{"location":"guides/uninstall/#removing-linux-partitions","title":"Removing Linux partitions","text":"<p>You may want to do this from macOS Recovery as you will be resizing (expanding) your startup disk, although you don't need to.</p> <ol> <li>In macOS open Disk Utility</li> <li>Click \"View\" then \"Show all devices\"</li> <li>Select your Apple SSD</li> <li>Click \"Partition\". If it suggests adding volumes, don't.</li> <li>Select your Linux partition, and click <code>-</code> to remove it. Your macOS partition should expand to fill the space that Linux was in.</li> <li>Click apply.</li> <li>Disk Utility will remove your Linux partition and expand your macOS partition. This may take a while, but do not interrupt this process. While it does this, consider the fact that you didn't need admin to remove your Linux partition.</li> </ol>"},{"location":"guides/uninstall/#removing-the-linux-boot-loader","title":"Removing the Linux boot-loader","text":""},{"location":"guides/uninstall/#if-using-a-separate-efi-partition","title":"If using a separate EFI partition","text":"<p>Follow the same steps to remove the seperate EFI partition as you followed to remove the Linux partition.</p>"},{"location":"guides/uninstall/#if-using-the-efi-partition-already-available-in-your-mac","title":"If using the EFI partition already available in your Mac.","text":"<ol> <li>In macOS run <code>sudo diskutil mount disk0s1</code>, which mounts your EFI System Partition.</li> <li>There will now be an EFI disk visible in Finder, open it and go into the EFI folder (within the EFI disk).</li> <li>Remove any folders other than Apple, Boot, or Microsoft.</li> <li>Enter the Boot folder and remove <code>bootx64.efi</code>.</li> <li>If you have Windows installed with Bootcamp, Enter Microsoft folder and then the Boot folder inside the Microsoft folder and copy <code>bootmgfw.efi</code>. Paste it in that Boot folder in the EFI folder of the EFI disk from where you had deleted <code>bootx64.efi</code>. Now rename the newly copied <code>bootmgfw.efi</code> to <code>bootx64.efi</code>. Be careful not to delete the Windows bootloader.</li> </ol>"},{"location":"guides/uninstall/#enable-secure-boot-optional","title":"Enable Secure Boot (Optional)","text":"<ol> <li>Boot to macOS Recovery by holding <code>\u2318-R</code> as you turn your Mac on.</li> <li>Enable Secure Boot as described here.</li> </ol>"},{"location":"guides/wifi-bluetooth/","title":"Introduction","text":"<p>This page is a step by step guide to get Wi-Fi and Bluetooth working on T2 Macs. This guide is also applicable to iMac19,1 and iMac19,2, which are non T2 Intel Macs.</p> <p>Arch/EndeavourOS</p> <p>If you're running Arch or EndeavourOS and have <code>apple-bcm-firmware</code> installed, you do not need to follow this guide.</p>"},{"location":"guides/wifi-bluetooth/#ensure-kernel-supports-otp-firmware-selection","title":"Ensure Kernel Supports OTP Firmware Selection","text":"<p>Check if this command outputs any lines: <code>modinfo brcmfmac | grep 4387</code> If it doesn't output anything, then upgrade your kernel.</p> <p>Refer to the \"Updating Kernel\" section on your distro's FAQ for instructions if you need to update your kernel:</p> <ul> <li>Arch</li> <li>Fedora</li> <li>Manjaro</li> <li>Ubuntu</li> </ul>"},{"location":"guides/wifi-bluetooth/#setting-up","title":"Setting up","text":"<p>We now use a script which can help you set up Wi-Fi and Bluetooth. Follow the instructions below to use this script :-</p>"},{"location":"guides/wifi-bluetooth/#on-macos","title":"On macOS","text":"<ol> <li>Click here to download the script.</li> <li>Boot into macOS.</li> <li>Run this script there.</li> <li>When the script shall run successfully, it shall ask you to follow either of the two options mentioned in the On Linux section, on Linux.</li> <li>Boot into Linux.</li> </ol>"},{"location":"guides/wifi-bluetooth/#on-linux","title":"On Linux","text":"<p>You have two options here. You can follow either of the two, its purely based on your choice. If your distro installer requires internet to install, you can also follow these steps on a Live ISO environment:</p> <p>Note :- We have noticed a lot of users directly running the script on Linux and without running it first on macOS. Please ensure that you have run the script on macOS first. In case you have removed macOS, this script won't be much helpful to you.</p> <ul> <li> <p>The first is to either copy this script to Linux via a USB, download it if you have a wired internet connection, or use some other method to get it to Linux. You can then run the script again from Linux and it will finish setting up Wi-Fi and Bluetooth.</p> </li> <li> <p>The second method is to simply run the following commands on Linux :-</p> </li> </ul> <pre><code>sudo umount /dev/nvme0n1p1\nsudo mkdir -p /tmp/apple-wifi-efi\nsudo mount /dev/nvme0n1p1 /tmp/apple-wifi-efi\nbash /tmp/apple-wifi-efi/firmware.sh\n</code></pre>"},{"location":"guides/wifi-bluetooth/#for-those-who-dont-know-how-to-run-a-script","title":"For those who don\u2019t know how to run a script","text":"<p>If you don\u2019t know how to run a script, follow these instructions.</p> <ol> <li> <p>Boot into macOS, and download the script. Make sure the script is there in your Downloads folder.</p> </li> <li> <p>Open the terminal and run :-</p> <pre><code>bash ~/Downloads/firmware.sh\n</code></pre> </li> <li> <p>Then boot into Linux and place the same script in the Downloads folder over there or simply run the commands the script asked you to run in Linux when you executed it in macOS.</p> </li> <li> <p>If you placed the script in the Downloads folder instead of running the commands told by the script in macOS, run step 2 command on the terminal, this time in Linux. Else you needn't follow this step.</p> </li> </ol>"},{"location":"guides/wifi-bluetooth/#testing-firmware","title":"Testing Firmware","text":"<p>You can check the logs to confirm correct loading of the firmware using <code>sudo journalctl -k --grep=brcmfmac</code>, the output should look similar to this</p> <pre><code>Dec 24 22:34:19 hostname kernel: usbcore: registered new interface driver brcmfmac\nDec 24 22:34:19 hostname kernel: brcmfmac 0000:01:00.0: enabling device (0000 -&gt; 0002)\nDec 24 22:34:20 hostname kernel: brcmfmac: brcmf_fw_alloc_request: using brcm/brcmfmac4377b3-pcie for chip BCM4377/4\nDec 24 22:34:20 hostname kernel: brcmfmac 0000:01:00.0: Direct firmware load for brcm/brcmfmac4377b3-pcie.apple,tahiti-SPPR-m-3.1-X0.bin failed with error -2\nDec 24 22:34:20 hostname kernel: brcmfmac 0000:01:00.0: Direct firmware load for brcm/brcmfmac4377b3-pcie.apple,tahiti-SPPR-m-3.1.bin failed with error -2\nDec 24 22:34:20 hostname kernel: brcmfmac 0000:01:00.0: Direct firmware load for brcm/brcmfmac4377b3-pcie.apple,tahiti-SPPR-m.bin failed with error -2\nDec 24 22:34:20 hostname kernel: brcmfmac 0000:01:00.0: Direct firmware load for brcm/brcmfmac4377b3-pcie.apple,tahiti-SPPR.bin failed with error -2\nDec 24 22:34:20 hostname kernel: brcmfmac 0000:01:00.0: Direct firmware load for brcm/brcmfmac4377b3-pcie.apple,tahiti-X0.bin failed with error -2\nDec 24 22:34:20 hostname kernel: brcmfmac: brcmf_c_process_txcap_blob: TxCap blob found, loading\nDec 24 22:34:20 hostname kernel: brcmfmac: brcmf_c_preinit_dcmds: Firmware: BCM4377/4 wl0: Jul 16 2021 18:25:13 version 16.20.328.0.3.6.105 FWID 01-30be2b3a\nDec 24 22:34:20 hostname kernel: brcmfmac 0000:01:00.0 wlp1s0f0: renamed from wlan0\n</code></pre>"},{"location":"guides/wifi-bluetooth/#fixing-unstable-wpa2-using-iwd","title":"Fixing unstable WPA2 using iwd","text":"<p>Using iwd is technically not needed for using wifi. But if you are facing unstable WPA2 issues and have to follow step 1 of the above section every time you connect to a WPA2 network, you will have to follow this section. If your connection is stable, you needn't follow this section.</p> <p>Instructions in this section might be different for the distribution that you are trying to install.</p> <ol> <li> <p>To get WPA2 to work stably, install the <code>iwd</code> package (for example <code>sudo apt install iwd</code> on Ubuntu).</p> </li> <li> <p>Edit <code>/etc/NetworkManager/NetworkManager.conf</code> to look like the following:</p> <pre><code>[device]\nwifi.backend=iwd\n</code></pre> </li> <li> <p>Set iwd to run on boot with the following commands (assuming that you are using systemd).</p> <pre><code>sudo systemctl enable --now iwd\nsudo systemctl restart NetworkManager\n</code></pre> </li> </ol> <p>If you wifi disconnects or has issues otherwise its advised to restart iwd: <code>sudo systemctl restart iwd</code>, or reprobe the wifi kernel module: <code>sudo modprobe -r brcmfmac &amp;&amp; sudo modprobe brcmfmac</code>.</p>"},{"location":"guides/windows/","title":"Introduction","text":"<p>This page is a guide on getting Windows and Linux both installed. Secure Boot Must be disabled from macOS recovery. If you want to be able to choose from macOS, Windows, or Linux in the Startup Manager (the menu you get by holding \u2325 key), goto 'Using seperate EFI partitions'. If you just want to select between Linux and Windows in the GRUB bootloader, goto 'Using the same EFI partition'.</p> <p>The simplist way to triple boot is to install Windows first, and install linux on the same EFI partition, so that the Windows option in Startup Manager will let you pick Linux or Windows. To do that, follow the first set of instructions here.</p>"},{"location":"guides/windows/#using-the-same-efi-partition","title":"Using the same EFI partition","text":""},{"location":"guides/windows/#if-windows-is-installed-first","title":"If Windows is installed first","text":"<ol> <li>Install linux normally, with a patched kernel and dkms modules (this is probably done for you if you are using an installer specific to t2 macs).</li> <li>Put your bootloader on <code>/dev/nvme0n1p1</code>, which should be set to mount at <code>/boot/efi</code>. Once it installs the bootloader, the Windows entry in startup manager will boot linux.</li> <li> <p>Fix blank screen issue that may occur when booting Windows (Credits to gbrow004 for documenting this fix on his Gist).</p> <ol> <li>Open a terminal and type in <code>sudo gdisk /dev/nvme0n1</code>.</li> <li>Press <code>x</code> for expert mode</li> <li>Press <code>n</code> to create a protective MBR</li> <li>Press <code>w</code> to write the partition and <code>y</code> to confirm</li> <li>If gdisk doesn't quit, press <code>q</code> to exit the command</li> </ol> </li> <li> <p>Enable the GRUB menu so that you'll have time to pick Windows</p> <ol> <li>Boot into your linux install by selecting the Windows option in startup manager.</li> <li>Edit <code>/etc/default/grub</code> with any preferred editior (nano/vim/) and with sudo. Change line <code>GRUB_TIMEOUT_STYLE</code> to <code>GRUB_TIMEOUT_STYLE=MENU</code>. If you are using <code>nano</code>, save the file by doing CTRL+X, Y, then enter.</li> <li>We've now changed the GRUB Bootloader settings, but we now need to update GRUB to apply these changes. Type in <code>sudo update-grub</code> and hit enter. After the command is done, you're finished.</li> </ol> </li> <li> <p>You should now be able to boot either Windows or Linux from the GRUB bootloader.</p> </li> </ol>"},{"location":"guides/windows/#if-linux-is-installed-first","title":"If Linux is installed first","text":"<ol> <li>Make sure that your linux partitions are not labled as <code>Microsoft Basic Data</code>, if they are, Bootcamp Assistant will think Windows is already installed. To fix this, go to Linux and do <code>sudo cfdisk /dev/nvme0n1</code> and change the type of your linux partitions to <code>Linux Filesystem</code>.</li> <li>Install Windows normaly with Bootcamp. Windows will replace your Linux boot option.</li> <li>Boot into macOS.</li> <li><code>sudo diskutil mount disk0s1</code></li> <li>Go to <code>/Volumes/EFI/efi</code></li> <li>In this folder there will be a <code>Microsoft</code> folder, an <code>Apple</code> folder, one with your distro's name or just <code>GRUB</code>, and one called <code>Boot</code>. The <code>Boot</code> folder will have a file named <code>bootx64.efi</code>, rename this to <code>windows_bootx64.efi</code></li> <li>Copy the <code>grubx64.efi</code> file in your distro's folder to <code>/Volumes/EFI/efi/Boot/bootx64.efi</code>. The the Windows option in Startup Manager will now boot Linux.</li> <li> <p>Fix blank screen issue that may occur when booting Windows (Credits to gbrow004 for documenting this fix on his Gist).</p> <ol> <li>In Linux, open a terminal and type in <code>sudo gdisk /dev/nvme0n1</code>.</li> <li>Press <code>x</code> for expert mode</li> <li>Press <code>n</code> to create a protective MBR</li> <li>Press <code>w</code> to write the partition and <code>y</code> to confirm</li> <li>If gdisk doesn't quit, press <code>q</code> to exit the command</li> </ol> </li> <li> <p>Enable the GRUB menu so that you'll have time to pick Windows</p> <ol> <li>Boot into your linux install by selecting the Windows option in startup manager.</li> <li>Edit <code>/etc/default/grub</code> with any preferred editior (nano/vim/) and with sudo. Change line <code>GRUB_TIMEOUT_STYLE</code> to <code>GRUB_TIMEOUT_STYLE=MENU</code>. If you are using <code>nano</code>, save the file by doing CTRL+X, Y, then enter.</li> <li>We've now changed the GRUB Bootloader settings, but we now need to update GRUB to apply these changes. Type in <code>sudo update-grub</code> and hit enter. After the command is done, you're finished.</li> </ol> </li> <li> <p>You should now be able to boot either Windows or Linux from the GRUB bootloader.</p> </li> </ol> <p>It may be possible to skip steps 5-8 by doing the following command in macOS: <code>sudo sh -c \"bless --mount /Volumes/EFI --setBoot --file /Volumes/EFI/efi/$(ls /Volumes/EFI/efi|grep -i -e microsoft -e boot -e apple -v)/grubx64.efi --shortform\"</code> This might not prevent step 8 from being needed.</p>"},{"location":"guides/windows/#using-seperate-efi-partitions","title":"Using seperate EFI partitions","text":""},{"location":"guides/windows/#installing-linux-with-or-without-windows-already-installed","title":"Installing Linux (With or without Windows already installed)","text":""},{"location":"guides/windows/#in-macos","title":"In macOS","text":"<p>Create partitions with Disk Utility:</p> <ul> <li>Make a 200Mb FAT32 partition, call it something like <code>EFI2</code>. Make sure you do not use <code>EFI</code> as the label.</li> <li>Create your main partition(s) for Linux, make them macOS Extended/HFS+ to stop Bootcamp Installer from thinking they are Windows. These will be erased and reformatted by your installer.</li> </ul>"},{"location":"guides/windows/#in-your-distros-installer","title":"In your distro's installer","text":"<p>If you are using an interactive installer:</p> <ol> <li> <p>Set the <code>EFI2</code> partition to be mounted at <code>/boot/efi</code> and set it as \"ESP\"/\"Boot\"/\"EFI System Partition\". Don't use the partition labeled <code>EFI</code> located at <code>/dev/nvme0n1p1</code>, to avoid breaking the Windows bootloader stored there. Ensure that <code>/dev/nvme0n1p1</code> wasn't set by default to be used as the \"EFI System Partition\".</p> <p>Ubuntu</p> <p>On Ubuntu since the installer doesn't support seperate EFI partitions, install normally to the Windows EFI partition and follow this section to seperate out the partition.</p> </li> <li> <p>Your main partition that were formatted as macOS Extended/HFS+ can be mounted at <code>/</code>.</p> </li> <li> <p>If it fails to install the bootloader, open a terminal:</p> <ol> <li>Use <code>lsblk</code> or <code>mount</code> to find where your install's root partition is installed</li> <li><code>chroot $that_partitions_mount_point_here</code></li> <li><code>grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --no-nvram --removable</code></li> </ol> </li> <li> <p>There will now be an <code>EFI Boot</code> option in the macOS Startup Manager (The menu you get by holding option at boot) which will boot Linux.</p> </li> </ol> <p>If you are doing it manually:</p> <ol> <li>Format the main Linux partition(s) as ext4, btrfs, or whatever you intend to use.</li> <li>Mount your partitions, put the <code>EFI2</code> one at <code>/boot/efi</code> within your chroot.</li> <li>Install normally up until you install your bootloader, but don't forget to get a patched kernel and the correct dkms modules</li> <li>Within your chroot, do <code>grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=GRUB --no-nvram --removable</code></li> <li>There will now be an <code>EFI Boot</code> option in the macOS Startup Manager (The menu you get by holding option at boot) which will boot Linux.</li> </ol>"},{"location":"guides/windows/#installing-windows-when-linux-is-installed","title":"Installing Windows when Linux is installed","text":"<ol> <li>If there are partitions labeled as <code>Microsoft Basic Data</code>, Bootcamp Assistant will think you have Windows installed. Use <code>sudo cfdisk /dev/nvme0n1</code> to change your Linux partitions to <code>Linux Filesystem</code> or whatever is appropriate.</li> <li>If your second EFI partition is labeled as <code>EFI System</code>, you'll need to use <code>cfdisk</code> again to make it not that, as the Windows installer fails if there are two.</li> <li>Bootcamp should install Windows normally. If you put your Linux bootloader on <code>/dev/nvme0n1p1</code>, Windows will replace it, and that's why a second EFI partition is ideal.</li> </ol>"},{"location":"guides/windows/#seperate-the-efi-partition-after-linux-is-installed","title":"Seperate the EFI partition after Linux is installed","text":"<p>In case you have installed Linux to the same EFI partition as used by Windows, and now want to seperate it out, then:</p> <ol> <li>Using any disk utility software, make a 200Mb FAT32 partition, call it something like <code>EFI2</code>. Make sure you do not use <code>EFI</code> as the label.</li> <li>Download this script.</li> <li>Run this script using <code>bash /path/to/script &lt;Name of seperate partition&gt;</code> in Linux. E.g.: If your seperate partition has the name <code>EFI2</code>, and script is in your Downloads folder, run <code>bash $HOME/Downloads/efi.sh EFI2</code>.</li> </ol>"}]}